Expression < MyLangAST = NumericLiteral: double value
                       | StringLiteral: String value
                       | BooleanLiteral: boolean value
                       | NullLiteral: Token keyword
                       | Identifier: Token value
                       | BinaryOperation: Token operator, Expression left, Expression right
                       | UnaryOperation: Token operator, Expression operand
                       | FunctionCall: Expression callee, List<Parameter> arguments, Map<String, Expression> named
                       | InstExpression: Expression instantiated, List<Type> args
                       | FunctionExpression: String optionalName, ParameterInformation parameters, Expression body, Type retType
                       | IfExpression: Expression condition, Expression thenBranch, Expression elseBranch
                       | IfValExpression: Pattern pat, Expression matched, Expression thenBranch, Expression elseBranch
                       | ListExpression: List<Parameter> elements
                       | TupleExpression: List<Expression> elements
                       | IndexExpression: Expression list, Expression index
                       | PropertyExpression: Expression object, Token name
                       | BlockExpression: List<DeclarationOrStatement> statements, Expression returnValue
                       | WhileYieldExpression: Expression condition, Parameter body
                       | WhileValYieldExpression: Pattern pattern, Expression matched, Expression body
                       | WhileDoExpression: Expression condition, Statement body
                       | WhileValDoExpression: Pattern pattern, Expression matched, Expression body
                       | ForYieldExpression: Pattern pat, Expression collection, Expression guard, Parameter body
                       | RangeExpression: Expression start, Expression end, Expression step
                       | ThisExpression: Token keyword
                       | ReturnExpression: Expression returnValue
                       | MatchExpression: Expression matched, List<Pattern> cases, List<Expression> branches
                       | WildcardExpression: Token position;

Declaration < MyLangAST, DeclarationOrStatement, ConstructorOrDeclaration =
        VariableDeclaration: Pattern pat, Type type, Expression initializer, boolean isReassignable, boolean export
    |   ValElseDeclaration:  Pattern pat, Expression initializer, Expression elseBranch
    |   FunctionDeclaration: Token Name, List<Token> typeParams, ParameterInformation parameters, Expression body, Type retType, boolean export
    |   ClassDeclaration:    Token Name, List<Token> args, List<Declaration> fieldsAndMethods, ClassConstructor constructor, boolean export
    |   EnumDeclaration:     Token Name, List<Token> args, List<EnumConstructor> variants, boolean export, List<FunctionDeclaration> methods
    |   TypeDefDeclaration:  Token Name, List<Token> args, Type definition, boolean export
    |   ModuleDeclaration:   MyLangPath Name
    |   EmptyDeclaration:    Token semicolon;

Import < MyLangAST = ImportDeclaration: MyLangPath Name;
Statement < MyLangAST, DeclarationOrStatement =
        ExpressionStatement: Expression expression
    |   IfStatement: Expression condition, Statement body
    |   SetStatement: Setter setter, Expression expression
    |   ForDoStatement: Pattern pat, Expression collection, Expression guard, Expression body
    |   EmptyStatement: Token semicolon;

Setter < MyLangAST = 
        VariableSetter: Token name
    |   IndexSetter: Expression list, Expression index
    |   PropertySetter: Expression object, Token name
    |   TupleSetter: List<Setter> setters
    |   WildcardSetter: ;

Constructor < MyLangAST, ConstructorOrDeclaration = 
        ClassConstructor:   Token keyword, ParameterInformation parameters, Expression body
    |   EnumConstructor:    Token name, List<Type> parameters;

Parameter < MyLangAST = 
        ExpressionParameter: Expression expr
    |   SpreadParameter: Expression collection
    |   NamedParameter: Token name, Expression parameter
    |   ConditionalParameter: Expression body, Expression guard;

Pattern < MyLangAST = 
        VariableBinding: Token name
    |   Wildcard: 
    |   NumberPattern:  double value
    |   BooleanPattern: boolean value
    |   StringPattern:  String value
    |   TuplePattern:   List<Pattern> subPatterns
    |   ConstructorPattern: Token constr, List<Pattern> subPatterns;

ConstructorOrDeclaration < MyLangAST;
DeclarationOrStatement < MyLangAST;

Type < MyLangAST = 
        TypeIdentifier: Token name
    |   FunctionType: 
            List<Type> parameters, 
            List<Type> optionalParameters, 
            Map<String, Type> named, 
            Map<String, Type> optionalNamed,
            Type varargsType, 
            Type returnType
    |   ListOf: Type elements
    |   Tuple:  List<Type> types
    |   Access: Type accessed, Token name
    |   TypeAppl: Type applied, List<Type> args
    |   VoidType: 
    |   NumberType: 
    |   BooleanType: 
    |   StringType: ;

TypeRep < MyLangAST =
        TypeIdentifierRep: Token name, TypeEnv env
    |   FunctionTypeRep: 
            List<TypeRep> parameters, 
            List<TypeRep> optionalParameters, 
            Map<String, TypeRep> named, 
            Map<String, TypeRep> optionalNamed,
            TypeRep varargsType, 
            TypeRep returnType, 
            TypeEnv env
    |   TypeFunction: List<Token> typeParams, TypeRep body, TypeEnv env
    |   TypeApplication: TypeRep applied, List<TypeRep> params
    |   GenericType: TypeFunction t
    |   TypeVar: Token name, TypeEnv env
    |   ClassType: 
            Token name, 
            Map<String, TypeRep> accessors, 
            Map<String, Boolean> readability, 
            TypeRep constructor, 
            TypeEnv env
    |   EnumType:
            Token name,
            Map<String, TypeRep> variants,
            Map<String, TypeRep> methods,
            TypeEnv  env
    |   ListOfRep: TypeRep elements
    |   TupleRep:   List<TypeRep> elements
    |   Builtin: BuiltinType type
    |   Never: 
    |   AccessRep: TypeRep accessed, Token name
    |   UnknownType: 
    |   Module: String name, TypeEnv enviroment;
