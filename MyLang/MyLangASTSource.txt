Expression < MyLangAST = NumericLiteral: double value
                       | StringLiteral: String value
                       | BooleanLiteral: boolean value
                       | NullLiteral: Token keyword
                       | Identifier: Token value
                       | BinaryOperation: Token operator, Expression left, Expression right
                       | UnaryOperation: Token operator, Expression operand
                       | FunctionCall: Expression callee, List<Parameter> arguments, Map<String, Expression> named
                       | FunctionExpression: String optionalName, ParameterInformation parameters, Expression body, Type retType
                       | IfExpression: Expression condition, Expression thenBranch, Expression elseBranch
                       | ListExpression: List<Parameter> elements
                       | IndexExpression: Expression list, Expression index
                       | PropertyExpression: Expression object, Token name
                       | BlockExpression: List<DeclarationOrStatement> statements, Expression returnValue
                       | WhileYieldExpression: Expression condition, Parameter body
                       | WhileDoExpression: Expression condition, Statement body
                       | ForYieldExpression: Token variable, Expression collection, Expression guard, Parameter body
                       | ForDoExpression: Token variable, Expression collection, Expression guard, Statement body
                       | RangeExpression: Expression start, Expression end, Expression step
                       | ThisExpression: Token keyword;

Declaration < MyLangAST, DeclarationOrStatement, ConstructorOrDeclaration =
        VariableDeclaration: Token Name, Type type, Expression initializer, boolean isReassignable, boolean export
    |   FunctionDeclaration: Token Name, ParameterInformation parameters, Expression body, Type retType, boolean export
    |   ClassDeclaration:    Token Name, List<Declaration> fieldsAndMethods, ClassConstructor constructor, boolean export
    |   EnumDeclaration:     Token Name, List<EnumConstructor> variants, boolean export
    |   TypeDefDeclaration:  Token Name, Type definition, boolean export
    |   ModuleDeclaration:   MyLangPath Name
    |   EmptyDeclaration:    Token semicolon;

Import < MyLangAST = ImportDeclaration: MyLangPath Name;
Statement < MyLangAST, DeclarationOrStatement =
        ExpressionStatement: Expression expression
    |   IfStatement: Expression condition, Statement body
    |   SetStatement: Token name, Expression expression
    |   SetIndexStatement: Expression list, Expression index, Expression expression
    |   SetPropertyStatement: Expression target, Token name, Expression expression
    |   ReturnStatement: Expression returnValue
    |   EmptyStatement: Token semicolon;

Constructor < MyLangAST, ConstructorOrDeclaration = 
        ClassConstructor:   Token keyword, ParameterInformation parameters, Expression body
    |   EnumConstructor:    Token name, List<Type> parameters;

Parameter < MyLangAST = 
        ExpressionParameter: Expression expr
    |   SpreadParameter: Expression collection
    |   NamedParameter: Token name, Expression parameter
    |   ConditionalParameter: Expression body, Expression guard;

Pattern < MyLangAST = 
        VariableBinding: Token name
    |   Wildcard: 
    |   NumberPattern:  double value
    |   BooleanPattern: boolean value
    |   StringPattern:  String value
    |   ConstructorPattern: Token constr, List<Pattern> subPatterns;

ConstructorOrDeclaration < MyLangAST;
DeclarationOrStatement < MyLangAST;

Type < MyLangAST = 
        TypeIdentifier: Token name
    |   FunctionType: 
            List<Type> parameters, 
            List<Type> optionalParameters, 
            Map<String, Type> named, 
            Map<String, Type> optionalNamed,
            Type varargsType, 
            Type returnType
    |   ListOf: Type elements
    |   Access: Type accessed, Token name
    |   VoidType: 
    |   NumberType: 
    |   BooleanType: 
    |   StringType: ;

TypeRep < MyLangAST =
        TypeIdentifierRep: Token name, TypeEnv env
    |   FunctionTypeRep: 
            List<TypeRep> parameters, 
            List<TypeRep> optionalParameters, 
            Map<String, TypeRep> named, 
            Map<String, TypeRep> optionalNamed,
            TypeRep varargsType, 
            TypeRep returnType, 
            TypeEnv env
    |   ClassType: 
            Token name, 
            Map<String, TypeRep> accessors, 
            Map<String, Boolean> readability, 
            FunctionTypeRep constructor, 
            TypeEnv env
    |   EnumType:
            Token name,
            Map<String, TypeRep> variants,
            TypeEnv  env
    |   ListOfRep: TypeRep elements
    |   Builtin: BuiltinType type
    |   AccessRep: TypeRep accessed, Token name
    |   UnknownType: 
    |   Module: String name, TypeEnv enviroment;
