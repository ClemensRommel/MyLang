fun fib(n: Number): Number {
    val fibs: Number[] := [1, 1];
    for i in [2..n] do {
        fibs.push(fibs.peekLast() + fibs.firsts.peekLast());
    };
    fibs.pop()
}

fun f(x: Number): Number := 3x + {
    val a: Number := 2 * x;
    a * a
};

fun doWith(A: Number, F: Fun(Number): Void): Void := F(A);

fun main() {
    print(3);
    doWith(40, fun(n: Number): Void := print(fib(n)));
    print("Done");

    val list: Number[] := [1, 2, 3, 4];
    list.append([5, 6, 7, 8]);
    print(list);

    print(test(false));

    val k: Koordinate := Koordinate(y: 2);
    print(k.toString());
    print(named(x: 3, y: "test i testi"));
    doWith(25, optional);
}

fun test(b: Bool): Number {
    if(b) do return 5;
    return 3;
    2
};
fun optional(x: Number, [y: Number := 2 * x]) {
    print(x + y);
}
class Koordinate := {
    val x: Number;
    val y: Number;
    init({x: Number := 0, y: Number := 0}) := {
        this.x := x;
        this.y := y;
    };
    fun toString(): String := "("+this.x+", "+this.y+")";
};

fun named({x: Number, y: String}): String := y + x;
