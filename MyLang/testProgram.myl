enum Test where
    Variant1(Number, Bool, String),
    Variant2(Test[]),
    Variant3(Test, Fun(Test): Test);
end

fun main() do 
    val x := Variant1(26, true, "variant1 test");
    val f := Variant2;
    fun g(x: Test): Test := Variant2([x]);
    val z := Variant3(x, g);
    print(new Variant1(13, false, "test"));
    print(x);
    print(f([Variant1(-25 + 2, false, "variant2 test")]));
    print(öffneDatei("test"));
    print(öffneDatei("test2"));
    print(if val Inhalt(str) := öffneDatei("test2") then str else "Fehler beim Öffnen der Datei");
    if val Fehler(fehler) := öffneDatei("test2") then do 
        print("Fehler: "+fehler);
    end else do
        print("Kein Fehler");
    end;
    print(z);
    for i in [1..10] do 
        print(fakultaet(i));
    end;
    testIter(for n in [1, 3, 5, 7, 9, 11, 13, 15] yield n * 2 end);
    print(inhalte);
    print(testValElse(4));
    print(testValElse(2));
    print(testValElse(0));
    print(variable1);
    print(variable2);
    for i in [1..10] do 
        print(fib(i));
    end;
end

enum DateiErgebnis where
    Inhalt(String),
    Fehler(String);
end
fun öffneDatei(pfad: String): DateiErgebnis := if pfad = "test" then Fehler("unbekannte Datei") else Inhalt(pfad);

val dateien := ["test", for n in [1..5] yield "test"+n end.., "test"];

val ergebnisse := for x in dateien yield öffneDatei(x) end;

val inhalte := for Inhalt(str) in ergebnisse yield "Inhalt: " + str end;

fun paar(x: Number, y: Number): (Number, Number) := (x, y);

val (variable1, variable2) := paar(3, 4);

fun fakultaet(x: Number): Number := match x do 
    case 0 := 1;
    case n := n * fakultaet(n-1);
end;

fun testValElse(x : Number): MaybeNumber do 
    val SomeNumber(x1) := f1(x) else do
        print(x);
        return EndOfIteration()
    end;
    val SomeNumber(x2) := f2(x1) else do 
        print(x1);
        return EndOfIteration()
    end;
    f3(x2)
end;

fun f1(x: Number): MaybeNumber := if x = 0 then EndOfIteration() else SomeNumber(10 / x);

fun f2(x: Number): MaybeNumber := if x = 0 then EndOfIteration() else SomeNumber(x * 2);
fun f3(x: Number): MaybeNumber := if x = 5 then EndOfIteration() else SomeNumber(x + 5);

fun testIter(xs: Number[]) do 
    val iterator := NumberListIterator(xs);
    while val SomeNumber(n) := iterator.next() do 
        print("Element: "+n);
    end;
end

class NumberListIterator where
    var index := 0;
    val list: Number[];
    new(xs: Number[]) do
        this.list := xs;
    end
    fun next(): MaybeNumber := if this.index >= this.list.length then EndOfIteration() else do 
        val element := this.list[this.index];
        this.index := this.index + 1;
        SomeNumber(element)
    end;
end;

enum MaybeNumber where
    EndOfIteration(),
    SomeNumber(Number);
end

class TupleTest where
    val xs: (Number, String[], Fun());
    new(newNumber: Number, strings: String[], action: Fun()) do
        this.xs := (newNumber, strings, action);
    end;
end;

fun fib(n: Number) do
    var (a ,b) := (1, 1);
    for i in [0..n-2] do 
        (a, b) := (b, a+b);
    end;
    b
end
