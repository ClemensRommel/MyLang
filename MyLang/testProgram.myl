enum Test where
    Variant1(Number, Bool, String);
    Variant2(Test[]);
    Variant3(Test, Fun(Test): Test);
end

fun main() do 
    val x: Test := Variant1(26, true, "variant1 test");
    val f: Fun(Test[]): Test := Variant2;
    fun g(x: Test): Test := Variant2([x]);
    val z: Test := Variant3(x, g);
    print(new Variant1(13, false, "test"));
    print(x);
    print(f([Variant1(-25 + 2, false, "variant2 test")]));
    print(öffneDatei("test"));
    print(öffneDatei("test2"));
    print(match öffneDatei("test2") do 
        case Fehler(fehler) := "Ein Fehler ist aufgetreten";
        case Inhalt(inhalt) := "Inhalt: "+inhalt;
    end);
    print(z);
    for i in [1..10] do 
        print(fakultaet(i));
    end;
end

enum DateiErgebnis where
    Inhalt(String);
    Fehler(String);
end

fun öffneDatei(pfad: String): DateiErgebnis := if pfad = "test" then Fehler("unbekannte Datei") else Inhalt(pfad);

fun fakultaet(x: Number): Number := match x do 
    case 0 := 1;
    case n := n * fakultaet(n-1);
end;
