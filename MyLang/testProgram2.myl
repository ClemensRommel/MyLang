enum NumLinkedList where
    Empty(),
    Cons(Number, NumLinkedList);

    fun length(): Number := match this do 
        case Empty() := 0;
        case Cons(?, xs) := 1 + xs.length();
    end;

end

fun foldr(x: Number, f: Fun(Number, Number): Number)(xs: NumLinkedList): Number := match xs do 
    case Empty() := x;
    case Cons(y, ys) := f(y, foldr(x, f)(ys));
end;

val sum := foldr(0, fun(x, y) := x + y);

fun list(xs: Number[]): NumLinkedList := if xs.length = 0 then Empty() else Cons(xs.first, list(xs.rest));

fun main() do
    print(Cons(3, Empty()));
    print(sum(Cons(3, Cons(5, Cons(-17, Empty())))));
    print(list([1..5]));
    val myList := list([1..15: 3]);
    print(myList);
    print(myList.length());
    print(sum(myList));
end
