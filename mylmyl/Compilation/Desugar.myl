module Compilation.Desugar;

import Ast := Syntax.Ast;
import Util;
import Env := Syntax.Env;
import CB := Compilation.CodeBuffers;
import Typechecking.Typechecker;
import Analyze := Typechecking.Analyze;

class Desugarer where 
    val name_gen : CB.NameGenerator;
    new(n : CB.NameGenerator) do 
        this.name_gen := n;
    end;

    fun new_var() : String := this.name_gen.next_name();
end

fun desugar(sugared : (Ast.Mut(Ast.Expr)[], Ast.Mut(Ast.Decl)[]), name_gen : CB.NameGenerator) do 
    val desugarer := Desugarer(name_gen);
    val (sugared_exprs, sugared_decls) := sugared;
    for expr in sugared_exprs do 
        expr.set(desugar_expr(desugarer, expr.get()));
    end;
    for decl in sugared_decls do 
        decl.set(desugar_decl(desugarer, decl.get()));
    end;
end;

fun desugar_expr(d : Desugarer, e : Ast.Expr) : Ast.Expr := match e do 
    case IfValExpr(return_ty, pat, matched, thenBr, elseBr, env, match_ty) := Ast.MatchExpr(
        matched,
        [(pat, thenBr, env), (Ast.WildcardPattern(), elseBr, get_outer_env(env))],
        match_ty,
        return_ty
    );
    case WhileValExpr(pat, matched, body, lmatched_ty, lenv, lresult_ty) := do
        val elem_ty := Util.wrap_linit.[Ast.Type](if val ListOf(e_ty) := lresult_ty.get() then e_ty else Ast.VoidT());
        Ast.WhileExpr(
            Ast.Boolean(true),
            Ast.BlockExpr(
                [],
                Some.[Ast.Expr](Ast.MatchExpr(
                    	matched,
                    [(pat, body, lenv), (Ast.WildcardPattern(), Ast.Break(elem_ty), lenv)],
                    lmatched_ty, 
                    elem_ty
                )),
                elem_ty,
                lenv
            ),
            lenv,
            lresult_ty
        )
    end;
end;

fun get_outer_env(e : Util.LateInitialized(Ast.Namespace)) : Util.LateInitialized(Ast.Namespace) do 
    val other := Ast.late_namespace();
    if e.is_init() do 
        other.init(e.get().close_scope());
    end;
    other
end

fun desugar_decl(de : Desugarer, d : Ast.Decl) : Ast.Decl := match d do
    case ValElseDeclaration(pat, matched, else_br, mut, exported, ldecl_ty, lmatched_ty, lenv) := do
        val declared : (String, Ast.Type)[] := declared_vars(pat, lmatched_ty.get()); 
        val generated : Env.AList(String) := Env.AListOf.[String](for (name, ?) in declared yield (name, de.new_var()) end);
        val tys : Ast.Type := Ast.Tuple(for (?, ty) in declared yield ty end);
        val ltys := Util.wrap_linit.[Ast.Type](tys);
        val resulting := Ast.VarDecl(
            Ast.TupleSetter(for (dec, ?) in declared yield Ast.Variable(dec) end, ltys), 
            ltys, 
            Some.[Ast.Expr](
                Ast.MatchExpr(
                    matched,
                    [(  replace_vars(generated, pat), 
                        Ast.TupleExpr(for i in [0..declared.length] yield Ast.Identifier(snd.[String, String](generated.bindings[i]), Util.wrap_linit.[Ast.Type](snd.[String, Ast.Type](declared[i]))) end, ltys), 
                        do 
                            val env := lenv.get().open_scope();
                            for i in [0..declared.length] do 
                                env.values.insert(snd.[String, String](generated.bindings[i]), Ast.VarInfo(false, snd.[String, Ast.Type](declared[i]), fst.[String, Ast.Type](declared[i]), env));
                            end;
                            Util.wrap_linit.[Ast.Namespace](env)
                        end), 
                    (Ast.WildcardPattern(), else_br, lenv)],
                    lmatched_ty, ltys
                )
            ), 
            mut, 
            exported);
        resulting
    end;
end;

fun declared_vars(pat : Ast.Pattern, ty : Ast.Type) : (String, Ast.Type)[] do 
    val lst : (String, Ast.Type)[] := [];
    Analyze.declared_vars_in(pat, ty, lst);
    lst
end;



fun replace_vars(map : Env.AList(String), pat : Ast.Pattern) : Ast.Pattern := match pat do 
    case NumericPattern(?) := pat; case StringPattern(?) := pat; case BooleanPattern(?) := pat;
    case NamePattern(n) := Ast.NamePattern(map.get(n));
    case WildcardPattern() := pat;
    case TuplePattern(pats) := Ast.TuplePattern(for p in pats yield replace_vars(map, p) end);
    case ConstructorPattern(name, pats, lenc, lenum, linf) := Ast.ConstructorPattern(name, for p in pats yield replace_vars(map, p) end, lenc, lenum, linf);
end;