module Compilation.Backend;

import SFG := IO.SourceFileGatherer;
import CB := Compilation.CodeBuffers;

import JCG := Compilation.GenerateJavaSource.CodeGenerator;
import JCB := Compilation.GenerateJavaSource.JavaCodeBuffers;
import JVG := Compilation.GenerateJavaSource.GlobalVariableGatherer;
import JTG := Compilation.GenerateJavaSource.TypeGenerator;

import BCG := Compilation.GenerateJavaBytecode.CodeGenerator;

import asm;
import IO.Args;
import Util;

import Env := Syntax.Env;

type Backend := Fun(SFG.SFGatherer, CB.NameGenerator) : Void;

fun generate_java_source(sfg : SFG.SFGatherer, name_gen : CB.NameGenerator) do 
    val ungenerated_types := JCB.UncreatedTypes();
    val global_info := Env.AList.[Env.Env(JCG.VariableInfo)]();
    val files := sfg.parsed_sourcefiles;
    val path_to_generated_code := SFG.generated_code_path();

    JVG.gather_global_variable_info(files, global_info);

    for (path, file) in files.bindings do 
        print("== Compiling "+path+" ==");
        val compiled := JCG.compile(file, name_gen, global_info, path_to_generated_code, ungenerated_types, sfg);
        Util.outputFile(output_path(path), compiled);
        move_line_up();
    end;

    JTG.compile_types(SFG.file_prefix + join("/", path_to_generated_code) + ".myl", ungenerated_types, name_gen);
end

fun generate_java_bytecode(sfg : SFG.SFGatherer, name_gen : CB.NameGenerator) do 
    val files := sfg.parsed_sourcefiles;

    for (path, file) in files.bindings do 
        print("== Compiling "+path+" ==");
        BCG.compile(file, split(output_path(path), "\\.").first, name_gen, sfg);
        move_line_up();
    end
end

fun dont_generate_code(sfg : SFG.SFGatherer, name_gen : CB.NameGenerator) do 
    print("Not generating code");
    // Don't generate code
end

fun output_path(str : String) : String do 
    val parts := split(str, "/");
    var out := "";
    var need_slash := false;
    for i in [0..parts.length - 1] do 
        if need_slash do out := out + "/"; end;
        val part := parts[i];
        out := out + part;
        need_slash := true;
    end;
    val last_part := parts[parts.length-1];
    out := out + (if need_slash then "/" else "") + "_"+last_part;
    out
end

fun choose_backend() : Backend := match IO.Args.backend_name do 
    case "java" := generate_java_source;
    case "java-bytecode" := generate_java_bytecode;
    case "no-codegen" := dont_generate_code;
    case ? := panic("Internal: unsupported backend "+IO.Args.backend_name);
end;