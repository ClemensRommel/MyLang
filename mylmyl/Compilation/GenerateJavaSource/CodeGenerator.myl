module Compilation.GenerateJavaSource.CodeGenerator;

import Ast := Syntax.Ast;
import Env := Syntax.Env;
import Analyze := Typechecking.Analyze;
import Util;
import SFG := IO.SourceFileGatherer;
import CB  := Compilation.CodeBuffers;
import JCB := Compilation.GenerateJavaSource.JavaCodeBuffers;
import DC  := Compilation.GenerateJavaSource.DeclCompiler;
import SC  := Compilation.GenerateJavaSource.StmtCompiler;

class Compiler where 
    var buf : JCB.StringBuffer := JCB.StringBuffer();
    var name_gen : CB.NameGenerator;
    val sfg : SFG.SFGatherer;

    var is_class : Bool := true;
    var is_static : Bool := true;
    var is_generated_interface : Bool := false;
    var expect_ref_ty : Bool := false; // Wether we're currently compiling a type that is a type parameter

    val ungenerated_types : JCB.UncreatedTypes;

    var current_env : Ast.Namespace;

    var env : Env.Env(VariableInfo) := Env.Env.[VariableInfo]();

    val all_modules : Env.AList(Env.Env(VariableInfo));

    val loop_labels : String[] := [];

    val generated_module_path : String;

    new(globals : Ast.Namespace, 
        nameg : CB.NameGenerator, 
        modules : Env.AList(Env.Env(VariableInfo)), 
        gen_mod_path : String,
        uncreated_types : JCB.UncreatedTypes,
        the_sfg : SFG.SFGatherer,
        file : SFG.SourceFile) 
    do 
        this.sfg := the_sfg;
        this.current_env := globals;
        this.name_gen := nameg;
        this.all_modules := modules;
        this.generated_module_path := gen_mod_path;
        this.ungenerated_types := uncreated_types;
    end

    fun append(str : String) do
        this.buf.append(str);
    end

    fun newline() do 
        this.buf.newline();
    end

    fun indent() do 
        this.buf.indent();
    end
    
    fun dedent() do 
        this.buf.dedent();
    end

    fun strip_trailing() do 
        this.buf.strip_trailing();
    end

    fun new_var() : String := this.name_gen.next_name();

    fun enqueue_type(t : Ast.Type, type_name : String) do 
        this.ungenerated_types.enqueue_type(t, type_name);
    end
    
    fun get_enqueued_type(t : Ast.Type) : Optional(String) do
        this.ungenerated_types.get_enqueued_type(t)
    end

    fun open_scope(new_env : Ast.Namespace) : ScopeInfo do 
        val previous_is_class := this.is_class;
        val previous_is_static := this.is_static;
        val previous_env := this.current_env;
        val previous_is_generated_interface := this.is_generated_interface;
        this.current_env := new_env;
        this.env := this.env.open_scope();
        this.is_class := false;
        this.is_static := false;
        this.is_generated_interface := false;
        ScopeInfo(previous_is_class, previous_env, previous_is_static, previous_is_generated_interface)
    end

    fun close_scope(sci : ScopeInfo) do 
        this.is_static := sci.previous_is_static;
        this.is_class := sci.previous_is_class;
        this.current_env := sci.previous_env;
        this.is_generated_interface := sci.previous_is_generated_interface;
        this.env := this.env.close_scope();
    end
end

class ScopeInfo where 
    val previous_is_class : Bool;
    val previous_env : Ast.Namespace;
    val previous_is_static : Bool;
    val previous_is_generated_interface : Bool;
    new(pic : Bool, penv : Ast.Namespace, pis : Bool, pigi : Bool) do 
        this.previous_is_class := pic;
        this.previous_env := penv;
        this.previous_is_static := pis;
        this.previous_is_generated_interface := pigi;
    end
end



enum Target where 
    Ignore(), UsedDirectly(), Return(), AssignTo(Ast.Setter);
end

class VariableInfo where 
    val defined_file : String[];
    var is_no_fc_fn : Bool := false;
    var is_constructor : Bool := false;
    var is_upvalue : Bool := false;
    new(mod_path : String[]) do 
        this.defined_file := mod_path;
    end
end

fun declare_builtins(c : Compiler) do 
    val p := c.current_env.module_path;
    c.env.insert("panic", do val panic_info := VariableInfo(p); panic_info.is_no_fc_fn := true; panic_info end);
    c.env.insert("args", do val args_info := VariableInfo(p); args_info.is_no_fc_fn := true; args_info end);
    //c.env.insert("join", do val join_info := VariableInfo(p); join_info.is_no_fc_fn := true; join_info end);
    //c.env.insert("split", do val split_info := VariableInfo(p); split_info.is_no_fc_fn := true; split_info end);
    //c.env.insert("number", do val number_info := VariableInfo(p); number_info.is_no_fc_fn := true; number_info end);
    //c.env.insert("len", do val len_info := VariableInfo(p); len_info.is_no_fc_fn := true; len_info end);
    //c.env.insert("strip", do val strip_info := VariableInfo(p); strip_info.is_no_fc_fn := true; strip_info end);
    //c.env.insert("matches", do val match_info := VariableInfo(p); match_info.is_no_fc_fn := true; match_info end);
    //c.env.insert("openFile", do val of_info := VariableInfo(p); of_info.is_no_fc_fn := true; of_info end);
    //c.env.insert("writeToFile", do val write_info := VariableInfo(p); write_info.is_no_fc_fn := true; write_info end);
    //c.env.insert("isNull", do val isn_info := VariableInfo(p); isn_info.is_no_fc_fn := true; isn_info end);
    //c.env.insert("replace", do val repl_info := VariableInfo(p); repl_info.is_no_fc_fn := true; repl_info end);
end

fun compile(
    file : SFG.SourceFile, 
    name_gen : CB.NameGenerator, 
    infos : Env.AList(Env.Env(VariableInfo)), 
    generated_path : String[], 
    ungenerated_types : JCB.UncreatedTypes,
    the_sfg : SFG.SFGatherer) : String 
do 
    val path_parts := split(file.path, "/"); // Parts of path
    val file_name_parts := split(path_parts.last, "\\."); // Name before extension
    val file_name := file_name_parts.first;
    val generated_prefix := split(SFG.file_prefix, "/");
    val generated_prefix_str := 
        join(".", generated_prefix) 
        + (if generated_prefix.length > 0  and generated_prefix != [""] then "." else "");
    val c := Compiler(
        file.names, name_gen, 
        infos, generated_prefix_str + join(".", generated_path), 
        ungenerated_types, the_sfg, file);
    c.env := infos.get(file.path);
    if  file.path != SFG.std_implicit_path do add_implicit_imports(c, infos.get(SFG.std_implicit_path)); end;
    declare_builtins(c);
    declare_package(c, path_parts);
    import_implicits(c);

    val output_path_parts := split(SFG.file_prefix, "/");
    if generated_path.length > 1 do
        c.append("import ");
        c.append(join(".", output_path_parts));
        if output_path_parts.length > 0 and output_path_parts != [""] do c.append("."); end;
        c.append(join(".", generated_path)); c.append(";"); c.newline();
    end;
    
    compile_imports(c, file.ast.imports, output_path_parts);
    c.append("public class _"+file_name+" {");
    c.indent(); c.newline();
    for decl in file.ast.decls do 
        DC.compile_decl(c, decl);
    end;
    c.dedent(); c.newline();
    c.append("}");
    c.newline();
    c.buf.buf.toString()
end

fun add_implicit_imports(c : Compiler, file : Env.Env(VariableInfo)) do 
    for name in file.names do 
        c.env.insert(name, file.get(name));
    end
end

fun declare_package(c : Compiler, path : String[]) do 
    if path.length > 1 do 
        c.append("package ");
        var need_dot := false;
        for i in [0..path.length - 1] do 
            if need_dot do c.append("."); end;
            c.append(path[i]);
            need_dot := true;
        end;
        c.append(";"); c.newline(); 
        c.newline();
    end
end

fun import_implicits(c : Compiler) do 
    c.append("import static std.runtime.Functions.*;");
    c.newline();
    c.append("import std.runtime.*;");
    c.newline();
    c.newline();
    c.append("import java.util.ArrayList;");
    c.newline();

    c.newline();
end

fun compile_imports(c : Compiler, imports : Ast.Import[], path_parts : String[]) do 
    fun compile_basic_import(parts : String[]) do 
        if parts.length > 1 then do // Classes without package before them dont need to be imported
            c.append("import ");
            var needs_dot := false;
            if parts[0] != "std" do 
                for part in path_parts do 
                    if needs_dot do c.append("."); end;
                    c.append(part);
                    needs_dot := true;
                end; 
            end;
            for j in [0..parts.length-1] do 
                if needs_dot do c.append("."); end;
                val part := parts[j];
                c.append(part);
                needs_dot := true;
            end;
            c.append("._"); c.append(parts[parts.length-1]);
            c.append(";"); c.newline();
        end else if parts[0] != "std" then do 
            c.append("import ");
            var needs_dot := false;
            for part in path_parts do 
                if needs_dot do c.append("."); end;
                c.append(part);
                needs_dot := true;
            end;
            if needs_dot do c.append("."); end;
            if parts[0]!= "_" do c.append("_"); end; // Not a generated file
            c.append(parts[0]);
            c.append(";");
            c.newline();
        end else do end;
    end
    for i in imports do 
        match i do 
            case BasicImport(parts) := do 
                compile_basic_import(parts);
            end;
            case AliasImport(alias, parts) := do 
                compile_basic_import(parts); // TODO: Alias deklarieren
            end;
        end;
    end;
    c.newline();
end

fun escape_string(str : String) : String do 
    var resulting := str;
    resulting := replace(resulting, "\\", "\\\\");
    resulting := replace(resulting, "\n", "\\n");
    resulting := replace(resulting, "\t", "\\t");
    resulting := replace(resulting, "\r", "\\r");
    resulting := replace(resulting, "\"", "\\\"");
    resulting := replace(resulting, "\0", "\\0");
    resulting := "\"" + resulting + "\"";
    resulting
end

fun mod_info_for_path(c : Compiler, obj : Ast.Expr) : Env.Env(VariableInfo) do 
    val mod_namespace := namespace_for_path(c, obj);
    var_info_for_namespace(c, mod_namespace)
end
fun namespace_for_path(c : Compiler, obj : Ast.Expr) : Ast.Namespace do 
    val Module(path) := Ast.get_as_path(obj) else panic("Unknown module access: "+obj);
    namespace_for_path_parts(c, path)
end

fun namespace_for_path_parts(c : Compiler, path : String[]) : Ast.Namespace := 
    if path.length = 1 and c.current_env.imported_modules.has(path[0]) 
        then c.current_env.imported_modules.get(path[0]) 
        else c.current_env.imported_modules.get(SFG.path_to_module(path));
            
fun var_info_for_namespace(c : Compiler, nmscp : Ast.Namespace) : Env.Env(VariableInfo) do 
    val file_path := join("/", nmscp.module_path) + ".myl";
    c.all_modules.get(file_path)
end

fun maybe_upvalue(c : Compiler, name : String, extra_path : String) : String := 
    if c.env.has(name) and c.env.get(name).is_upvalue then 
        extra_path + name + ".value"
    else 
        extra_path + name;