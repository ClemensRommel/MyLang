module Compilation.GenerateJavaSource.ExprCompiler;

import CG := Compilation.CodeGenerator;
import SC := Compilation.GenerateJavaSource.StmtCompiler;
import DC := Compilation.GenerateJavaSource.DeclCompiler;
import MC := Compilation.GenerateJavaSource.MatchCompiler;
import TC := Compilation.GenerateJavaSource.TypeCompiler;
import SFG := IO.SourceFileGatherer;
import Ast := Syntax.Ast;
import Env := Syntax.Env;
import Analyze := Typechecking.Analyze;
import Util;
import string := std.string;

fun compile_expr(c : CG.Compiler, expr : Ast.Expr, target : CG.Target) : String := match expr do 
    case DesugarableExpr(content) := compile_expr(c, content.get(), target);
    case NumberLiteral(n, number_type) := use_with_target(c, "("+number_cast(number_type) + (if n % 1 = 0 then "" + n + ".0" else ""+n) + ")", target);
    case StringLiteral(str) := do 
        use_with_target(c, CG.escape_string(str), target)
    end;
    case ThisExpr() := use_with_target(c, "this", target);
    case TupleExpr(subexprs, lt) := compile_tuple(c, subexprs, lt.get(), target);
    case ListExpr(subexprs, lt) := compile_list_literal(c, subexprs, lt.get(), target);
    case RangeExpr(start, end_expr) := compile_range_expr(c, start, end_expr, target);
    case Boolean(b) := use_with_target(c, if b then "true" else "false", target);
    case NullLiteral() := use_with_target(c, "null", target);
    case Identifier(name, lty) := compile_identifier(c, name, lty.get(), target);
    case BinaryOperation(op, left, right) := compile_binary(c, op, left, right, target);
    case UnaryOperation(op, operand) := compile_unary(c, op, operand, target);
    case IfExpr(lt, cond, thenBr, elseBr) := compile_if(c, lt.get(), cond, thenBr, elseBr, target);
    case BlockExpr(stmts, end_expr, lt, lenv) := compile_block(c, stmts, end_expr, lt.get(), lenv.get(), target);
    case ForExpr(loop_var, iterated, body, lenv, lt, lit) := compile_for(c, loop_var, 
                                                                         iterated, body, 
                                                                         lenv.get(), lt.get(), lit.get(), 
                                                                         target);
    case WhileExpr(cond, body, lty) := compile_while(c, cond, body, lty.get(), target);
    case FunctionCall(callee, call_args) := compile_call(c, callee, call_args, target);
    case InstantiationExpr(instantiated, type_args, lresult_ty) := compile_instantiated(c, instantiated, type_args, lresult_ty.get(), target); // Compiler can either infer it or go back here
    case FunctionExpr(params, return_type, body, lenv) := compile_function_expr(c, params, return_type, body, lenv.get(), target);
    case PropertyExpr(obj, name, la, lt, lft) := compile_property(c, obj, name, la.get(), lt.get(), lft.get(), target);
    case IndexExpr(lst, idx, llist_ty) := compile_index(c, lst, idx, llist_ty.get(), target);
    case MatchExpr(matched, arms, lmatchty, lretty) := MC.compile_match(c, matched, arms, lmatchty.get(), lretty.get(), target);
    case ReturnExpr(ret, lty) := compile_return(c, ret, lty.get(), target);
    case Break(lty) := compile_break(c, lty.get(), target);
end;

fun number_cast(num_ty : Ast.NumberType) : String := match num_ty do 
    case F64() := "(double)";
    case F32() := "(float)";
    case I64() := "(long)";
    case I32() := "(int)";
    case I16() := "(short)";
    case I8() := "(byte)";
end;

fun compile_tuple(c : CG.Compiler, subexprs : Ast.Expr[], ty : Ast.Type, target : CG.Target) : String do 
    val subexpr_target := match target do 
        case Ignore() := CG.Ignore();
        case ? := CG.UsedDirectly();
    end;
    val exprs := for expr in subexprs do compile_expr(c, expr, subexpr_target) end;
    if val Ignore() := target do 
        return "";
    end;
    // Name of the corresponding tuple type (will be created and will have a constructor)
    val tuple_type := TC.compile_type(c, ty); 
    var name := "";
    val setter := if val AssignTo(s) := target then s else do 
        name := c.new_var();
        c.append("final "+tuple_type+" "+name+";");
        c.newline();
        Ast.Variable(name)
    end;
    var buf := "new "+tuple_type+"(";
    var needs_comma := false;
    for expr in exprs do 
        if needs_comma do 
            buf := buf + ", ";
        end 
        buf := buf + expr;
        needs_comma := true;
    end;
    buf := buf + ")";
    assign(c, setter, buf);
    if val Return() := target then do 
        c.append("return "); c.append(name); c.append(";"); c.newline();
        ""
    end else name
end

// For side-effect-free expressions that dont write to the compiler but only return strings
fun use_with_target(c : CG.Compiler, expr : String, target : CG.Target) : String do 
    match target do 
        case Ignore() := ""; 
        case UsedDirectly() := expr;
        case AssignTo(setter) := do 
            assign(c, setter, expr)
        end;
        case Return() := do 
            return_stmt(c, expr)
        end;
    end
end

fun compile_list_literal(c : CG.Compiler, exprs : Ast.Expr[], lty : Ast.Type, target : CG.Target) : String do 
    if val Ignore() := target then do 
        for expr in exprs do 
            compile_expr(c, expr, CG.Ignore());
        end;
        ""
    end else do 
        val Variable(name) := if val AssignTo(s) := target then s else Ast.Variable(c.new_var()) 
                                else panic("invalid target for lists: "+target);
        if val AssignTo(?) := target then do end else do 
            val compiled_ty := TC.compile_type(c, lty);
            c.append(compiled_ty); c.append(" ");
        end;
        c.append(name+" = new ArrayList<>("+exprs.length+");"); c.newline();
        for expr in exprs do 
            val field := compile_expr(c, expr, CG.UsedDirectly());
            c.append(""+name+".add("+field+");"); c.newline();
        end;
        if val AssignTo(?) := target then "" else use_with_target(c, name, target)
    end
end

fun compile_range_expr(c : CG.Compiler, start : Ast.Expr, end_expr : Ast.Expr, target : CG.Target) : String do
    if val Ignore() := target then do 
        compile_expr(c, start, CG.Ignore());
        compile_expr(c, end_expr, CG.Ignore());
        ""
    end else do 
        val start_compiled := compile_expr(c, start, CG.UsedDirectly());
        val end_compiled := compile_expr(c, end_expr, CG.UsedDirectly());
        use_with_target(c, "__range("+start_compiled+", "+end_compiled+")", target)
    end
end

fun compile_identifier(c : CG.Compiler, fname : String, expected_ty : Ast.Type, target : CG.Target) : String do
    if val Ignore() := target do // Identifier has no side effects, so ignore means nothing has to be compiled
        return "";
    end;
    val defined_file := c.env.get(fname).defined_file;
    val current_file := c.current_env.module_path;
    val path := if defined_file != current_file 
            then SFG.path_to_generated_module(c.sfg, defined_file, false)+"."
            else "";
    if val Function(type_params, arg_tys, ret_type) := c.current_env.values.get(fname).ty then do
        if !c.env.get(fname).is_no_fc_fn do // Value is a first class function already
            // Value might be an upvalue
            return use_with_target(c, CG.maybe_upvalue(c, fname, path), target); // No lambda has to be created
        end;
        // Value is a first class function and therefore cannot be an upvalue
        val ty := TC.compile_type(c, c.current_env.values.get(fname).ty);
        var name := "";
        val temp_var := match target do
            case Return() := Ast.Variable("");
            case UsedDirectly() := do 
                name := c.new_var();
                Ast.Variable(name)
            end;
            case AssignTo(setter) := setter;
        end;
        match target do 
            case Return() := do 
                c.append("return ");
            end;
            case UsedDirectly() := do 
                c.append(ty); c.append(" "); c.append(name); c.append(" = ");
            end;
            case AssignTo(Variable(x)) := do 
                c.append(x); c.append(" = ");
            end;
        end;
        c.append("(");
        val params : String[] := [];
        var needs_comma := false;
        for param in arg_tys do 
            if needs_comma do 
                c.append(", ");
            end;
            val arg_name := c.new_var();
            c.append(TC.compile_type(c, param)); c.append(" "); c.append(arg_name);
            params.push(arg_name);
            needs_comma := true;
        end;
        c.append(") -> "); if c.env.get(fname).is_constructor do c.append("new "); end; 
        c.append(path+fname); c.append("(");
        needs_comma := false;
        for param in params do 
            if needs_comma do 
                c.append(", ");
            end
            c.append(param);
        end;
        c.append(");");
        c.newline();
        name
    end else if val Never() := c.current_env.values.get(fname).ty then do 
        use_with_target(c, default_value(expected_ty), target)
    end else do 
        // Normal variable, might be an upvalue
        use_with_target(c, CG.maybe_upvalue(c, fname, path), target)
    end
end

fun default_value(ty : Ast.Type) : String := match ty do 
    case Numeric(nty) := "("+number_cast(nty)+"0)"; 
    case Any() := "null";
    case BooleanT() := "false"; 
    case StringT() := "\"\""; 
    case VoidT() := "null";
    case Tuple(?) := "null"; 
    case Name(?, ?) := "null"; // Types that are refered to by name are objects, so nullable
    case Function(?, ?, ?) := "null"; 
    case ListOf(?) := "null"; 
    case Never() := "null";
end;

fun compile_binary(
    c : CG.Compiler, 
    op : Ast.BinOp, 
    left : Ast.Expr,
    right : Ast.Expr,
    target : CG.Target
) : String 
do 
    if is_lazy_op(op) do 
        return compile_lazy_binary(c, op, left, right, target);
    end
    if val Ignore() := target do // Don't need to compile the operation 
        compile_expr(c, left, CG.Ignore());
        compile_expr(c, right, CG.Ignore());
        return "";
    end;
    val operation := do 
        val lhs := compile_expr(c, left, CG.UsedDirectly());
        val rhs := compile_expr(c, right, CG.UsedDirectly());
        compile_bin_op(op, lhs, rhs)
    end;
    match target do 
        case Return() := do 
            return_stmt(c, operation)
        end;
        case AssignTo(setter) := do 
            assign(c, setter, operation)
        end;
        case UsedDirectly() := "(" + operation + ")";
    end
end

fun is_lazy_op(op : Ast.BinOp) : Bool := match op do case And() := true; case Or() := true; case ? := false; end;

fun compile_lazy_binary(c : CG.Compiler, op : Ast.BinOp, left : Ast.Expr, right : Ast.Expr, target : CG.Target) : String do 
    val prefix := if val And() := op then "" else "!";
    val default_result := if val And() := op then "false" else "true";
    val lft := compile_expr(c, left, CG.UsedDirectly());
    match target do
        case Ignore() := do 
            c.append("if("+prefix+lft+") {"); c.indent(); c.newline();
            compile_expr(c, right, CG.Ignore());
            c.dedent(); c.newline();
            c.append("}"); c.newline();
            ""
        end;
        case Return() := do
            c.append("if("+prefix+lft+") {"); c.indent(); c.newline();
            compile_expr(c, right, CG.Return()); c.dedent(); c.newline();
            c.append("} else {"); c.indent(); c.newline();
            c.append("return "+default_result+";"); c.dedent(); c.newline();
            c.append("}"); c.newline();
            ""
        end;
        case UsedDirectly() := do 
            val res_var := c.new_var();
            c.append("final boolean "+res_var+";"); c.newline();
            c.append("if("+prefix+lft+") {"); c.indent(); c.newline();
            compile_expr(c, right, CG.AssignTo(Ast.Variable(res_var))); c.dedent(); c.newline();
            c.append("} else {"); c.indent(); c.newline();
            c.append(res_var + " =  "+default_result+";"); c.dedent(); c.newline();
            c.append("}"); c.newline();
            res_var
        end;
        case AssignTo(to) := do 
            c.append("if("+prefix+lft+") {"); c.indent(); c.newline();
            compile_expr(c, right, target); c.dedent(); c.newline();
            c.append("} else {"); c.indent(); c.newline();
            assign(c, to, default_result); c.dedent(); c.newline();
            c.append("}"); c.newline();
            ""
        end;
    end
end

fun compile_bin_op(op : Ast.BinOp, lhs : String, rhs : String) : String := match op do 
    case Add(lty) := match lty.get() do 
        case Numeric(?) := lhs + "+" + rhs;
        case StringT() := "__stringify("+lhs+")+__stringify("+rhs+")";
    end;
    case Sub() := lhs + "-" + rhs;
    case Mul() := lhs + "*" + rhs;
    case Div() := lhs + "/" + rhs;
    case Mod() := lhs + "%" + rhs;
    case LessThan() := lhs + "<" + rhs;
    case LessEqual() := lhs + "<=" + rhs;
    case Equals() := "__equal("+lhs+", "+rhs+")";
    case NotEquals() := "!__equal("+lhs+", "+rhs+")";
    case GreaterThan() := lhs + ">" + rhs;
    case GreaterEqual() := lhs + ">=" + rhs;
    case And() := lhs + "&&" + rhs;
    case Or() := lhs + "||" + rhs;
    case Xor() := lhs + "^" + rhs;
end;

fun compile_unary(c : CG.Compiler, op : Ast.UnOp, operand : Ast.Expr, target : CG.Target) : String do 
    if val Ignore() := target do 
        compile_expr(c, operand, CG.Ignore());
        return "";
    end;
    val operation := do 
        val operand_comp := compile_expr(c, operand, CG.UsedDirectly());
        val op_c := compile_un_op(op);
        op_c + operand_comp
    end;
    match target do 
        case UsedDirectly() := "(" + operation + ")";
        case Return() := do 
            return_stmt(c, operation)
        end;
        case AssignTo(setter) := do 
            assign(c, setter, operation)
        end;
    end
end

fun compile_un_op(op : Ast.UnOp) : String := match op do 
    case Plus()  := "+";
    case Minus() := "-";
    case Not()   := "!";
end;

fun compile_if(
    c : CG.Compiler, 
    lt : Ast.Type,
    condition : Ast.Condition, 
    thenBr : Ast.Expr, 
    elseBr : Ast.Expr,
    target : CG.Target) : String do 
    val BooleanCond(cond) := condition else panic("Error: Did not desugar if condition "+condition);
    var name := "";
    val var_name := match target do 
        case Ignore() := Ast.Variable("");
        case Return() := Ast.Variable("");
        case UsedDirectly() := do 
            name := c.new_var();
            Ast.Variable(name)
        end;
        case AssignTo(setter) := setter;
    end;
    if val UsedDirectly() := target do
        c.append("final "); c.append(TC.compile_type(c, lt)); c.append(" "); c.append(name); c.append(";"); c.newline();
    end;
    val prev_buf := c.buf.buf; // Safe buffer before if to backtrack in case the if is not necessare
    c.buf.buf := string.Builder();
    val branch_target := match target do 
        case Ignore() := CG.Ignore();
        case Return() := CG.Return();
        case ? := CG.AssignTo(var_name);
    end;
    val cond_expr := compile_expr(c, cond, CG.UsedDirectly());
    val cond_buf := c.buf.buf.toString(); // TODO: Redo this
    c.buf.buf := string.Builder();
    c.append("if("); c.append(cond_expr); c.append(") {"); c.indent(); c.newline();
    val if_buf := c.buf.buf.toString();
    c.buf.buf := string.Builder();
    val thenBrExpr := compile_expr(c, thenBr, branch_target);
    val thenIsIgnored := thenBrExpr = "" and c.buf.buf.toString() = "";
    c.strip_trailing();c.dedent();c.newline(); c.append("} else {"); c.indent();c.newline();
    val else_buf := c.buf.buf.toString();
    c.buf.buf :=string.Builder();
    val elseBrExpr := compile_expr(c, elseBr, branch_target);
    val elseIsIgnored := elseBrExpr = "" and c.buf.buf.toString() = "";
    c.strip_trailing();c.dedent(); c.newline(); c.append("}"); c.newline();
    val end_buf := c.buf.buf.toString();
    c.buf.buf := prev_buf; // Restore previous buffer
    if thenIsIgnored and elseIsIgnored and CG.Ignore() = target then do // Both branches can be ignored
        c.append(compile_expr(c, cond, CG.Ignore())); // Recompile condition as ignored
        c.newline();
    end else do 
        c.append(cond_buf + if_buf + else_buf + end_buf); // Create whole branch in buffer
    end;
    name
end

fun compile_block(
    c : CG.Compiler, 
    stmts : Ast.Stmt[], 
    end_expr : Optional(Ast.Expr),
    t : Ast.Type,
    lenv : Ast.Namespace,
    target : CG.Target) : String 
do 
    var name := "";
    var var_name := match target do 
        case Ignore() := Ast.Variable("");
        case Return() := Ast.Variable("");
        case UsedDirectly() := do 
            name := c.new_var();
            Ast.Variable(name)
        end;
        case AssignTo(setter) := setter; 
    end;
    if val UsedDirectly() := target do 
        c.append("final "); 
        c.append(TC.compile_type(c, t)); 
        c.append(" "); 
        c.append(name);
        c.append(";"); 
        c.newline(); 
    end;
    c.append("{"); c.indent(); c.newline();
    val prv := c.open_scope(lenv);
    val captures := Analyze.analyze_captures(stmts, end_expr);
    for (binding_name, is_captured) in captures.bindings do 
        if is_captured do 
            val info := CG.VariableInfo(c.current_env.module_path);
            info.is_upvalue := true;
            c.env.insert(binding_name, info); // Mark as upvalue
        end
    end;
    for stmt in stmts do 
        SC.compile_stmt(c, stmt);
    end;
    if val Some(e) := end_expr then do 
        val resulting_target := match target do 
            case Ignore() := CG.Ignore();
            case Return() := CG.Return();
            case UsedDirectly() := CG.AssignTo(var_name);
            case AssignTo(?) := CG.AssignTo(var_name);
        end;
        compile_expr(c, e, resulting_target);
    end else do 
        match target do 
            case Ignore() := do end;
            case Return() := do c.append("return null;"); end;
            case UsedDirectly() := do 
                name := "null"; // Just user null as inline expression 
            end; 
            case AssignTo(setter) := do 
                assign(c, setter, "null");
            end;
        end;
    end;
    c.strip_trailing();
    c.dedent(); c.newline();
    c.append("}");
    c.newline();
    c.close_scope(prv);
    name
end

fun compile_for(
    c : CG.Compiler, 
    loop_var : Ast.Setter, 
    iterated : Ast.Expr, 
    body : Ast.Expr, 
    env : Ast.Namespace, 
    result_ty : Ast.Type, 
    iterated_elem_ty : Ast.Type,
    target : CG.Target) : String 
do 
    val internal_loop_var := c.new_var();
    val list_var := if target != CG.Ignore() and result_ty != Ast.VoidT() then do 
        val res_var := c.new_var();
        c.append("final "); c.append(TC.compile_type(c, result_ty)); c.append(" "+res_var+";"); c.newline();
        res_var
    end else "";
    if target != CG.Ignore() and result_ty != Ast.VoidT() do 
        assign(c, Ast.Variable(list_var), "new ArrayList<>()");
    end

    val loop_label := c.new_var();
    c.loop_labels.push(loop_label);

    if val RangeExpr(start_expr, end_expr) := iterated then do 
        val start_var := c.new_var();
        c.append("final double "+start_var+";"); compile_expr(c, start_expr, CG.AssignTo(Ast.Variable(start_var)));
        val end_var := c.new_var();
        c.append("final double "+end_var+";"); compile_expr(c, end_expr, CG.AssignTo(Ast.Variable(end_var)));
        c.append("if("+start_var+" < "+end_var+") "); c.newline();
        c.append(loop_label+": for(double "+internal_loop_var+" = "+start_var+"; "); 
        c.append(internal_loop_var+ " < "+end_var+"; "+internal_loop_var+"++) {");
        c.indent(); c.newline();
    end else do 
        val iterated_compiled := compile_expr(c, iterated, CG.UsedDirectly());
        c.append(loop_label+": for(var "+internal_loop_var+" : "+iterated_compiled+") {"); c.indent(); c.newline();
    end;
        val prv := c.open_scope(env);
        val BlockExpr(stmts, end_expr, ?, ?) := body else panic("Internal error: non-block-expression as body of for");
        // Dont have to scan loop variables for captures as they aren't mutable
        val captures := Analyze.analyze_captures(stmts, end_expr); 
        for (name, is_captured) in captures.bindings do 
            if is_captured do 
                val info := CG.VariableInfo(c.current_env.module_path);
                info.is_upvalue := true;
                c.env.insert(name, info); // Mark as upvalue
            end
        end;
        DC.compile_variables(c, loop_var, iterated_elem_ty, false, false, false);
        assign(c, loop_var, internal_loop_var);
        val result := compile_expr(c, body, if val Ignore() := target then CG.Ignore() else CG.UsedDirectly());
        if target != CG.Ignore() and result_ty != Ast.VoidT() do 
            c.append(list_var); c.append(".add("+result+");"); c.newline();
        end
        c.close_scope(prv);
        c.dedent(); c.newline();
    c.append("}");
    c.loop_labels.pop();
    c.newline();
    use_with_target(c, if result_ty = Ast.VoidT() then "null" else list_var, target)
end

fun compile_while(
    c : CG.Compiler, 
    condition : Ast.Condition, 
    body : Ast.Expr,  
    result_ty : Ast.Type, 
    target : CG.Target) : String 
do 
    val BooleanCond(cond) := condition else panic("Did not desugar while condition "+condition);
    val list_var := if target != CG.Ignore() and result_ty != Ast.VoidT() then do 
        val res_var := c.new_var();
        c.append("final "); c.append(TC.compile_type(c, result_ty)); c.append(" "+res_var+";"); c.newline();
        res_var
    end else "";
    if target != CG.Ignore() and result_ty != Ast.VoidT() do 
        assign(c, Ast.Variable(list_var), "new ArrayList<>()");
    end
    val loop_label := c.new_var();
    c.loop_labels.push(loop_label);
    c.append(loop_label+": while(true) {"); c.indent(); c.newline();
        val cond_compiled := compile_expr(c, cond, CG.UsedDirectly());
        if val Boolean(b) := cond then do if !b do c.append("break;"); end; end else do c.append("if(!"+cond_compiled+") { break; }"); c.newline(); end;
        val BlockExpr(stmts, end_expr, ?, lenv) := body else panic("Internal error: non-block-expression as body of while");
        val prv := c.open_scope(lenv.get());
        val captures := Analyze.analyze_captures(stmts, end_expr); // There are no loop variables
        for (name, is_captured) in captures.bindings do 
            if is_captured do 
                val info := CG.VariableInfo(c.current_env.module_path);
                info.is_upvalue := true;
                c.env.insert(name, info); // Mark as upvalue
            end
        end;
        val result := compile_expr(c, body, if val Ignore() := target then CG.Ignore() else CG.UsedDirectly());
        if target != CG.Ignore() and result_ty != Ast.VoidT() do 
            c.append(list_var); c.append(".add("+result+");"); c.newline();
        end
        c.close_scope(prv);
        c.dedent(); c.newline();
    c.append("}");
    c.newline();
    c.loop_labels.pop();
    use_with_target(c, if result_ty = Ast.VoidT() then "null" else list_var, target)
end

fun compile_call(c : CG.Compiler, callee : Ast.Expr, call_args : Ast.Expr[], target : CG.Target) : String do 
    var is_builtin_list_method := false;
    fun compile_callee(called : Ast.Expr) : String := match called do 
        case Identifier(name, lty) := do 
            val info := c.env.get(name);
            val defined_file := info.defined_file;
            val current_file := c.current_env.module_path;
            val path := if defined_file != current_file 
                then SFG.path_to_generated_module(c.sfg, defined_file, false) + "."
                else "";
            if info.is_constructor then 
                "new " + path + name
            else if info.is_no_fc_fn then do 
                path + name 
            end else
                compile_expr(c, called, CG.UsedDirectly()) + ".call"
        end;
        case InstantiationExpr(instantiated, ?, ?) := do 
            compile_callee(instantiated) // Type parameters inferred by java
        end;
        case PropertyExpr(obj, name, la, lt, lft) := do 
            if val ModuleAccessed() := la.get() then do 
                val nmscp := CG.namespace_for_path(c, obj);
                val mod_info := CG.var_info_for_namespace(c, nmscp);
                val accessed_info := mod_info.get(name);
                val accessed_path := SFG.path_to_generated_module(c.sfg, nmscp.module_path, false);
                if accessed_info.is_constructor 
                    then "new "+accessed_path+"."+name
                else if accessed_info.is_no_fc_fn 
                    then accessed_path + "." + name 
                else accessed_path + "." + name + ".call" 
            end else do 
                val obj_expr := compile_expr(c, obj, CG.UsedDirectly());
                val obj_ty := lt.get();
                if val ListOf(?) := obj_ty then do
                    is_builtin_list_method := true;
                    return builtin_list_method_call(c, obj_expr, name, call_args, target) // builtin list methods have to be compiled specially
                end else 
                if val MethodAccess() := la.get() then 
                     obj_expr + "." + name
                else obj_expr + "." + name  + ".call"
            end
        end;
        case ? := compile_expr(c, called, CG.UsedDirectly()) + ".call";
    end;
    val callee_compiled : String := compile_callee(callee);
    if is_builtin_list_method do return callee_compiled; end;
    val args_compiled := for arg in call_args do 
        compile_expr(c, arg, CG.UsedDirectly())
    end;
    var str := callee_compiled + "(";
    var needs_comma := false;
    for arg in args_compiled do 
        if needs_comma do 
            str := str + ", ";
        end;
        str := str + arg;
        needs_comma := true;
    end;
    str := str + ")";
    match target do 
        case Ignore() := do if str != "()" do c.append(str); c.append(";"); c.newline(); end; "" end;
        case Return() := do 
            return_stmt(c, str)
        end;
        case UsedDirectly() := do
            val tmp := c.new_var();
            c.append("var "+tmp+" = " + str + ";"); c.newline();
            tmp
        end;
        case AssignTo(setter) := do 
            assign(c, setter, str)
        end;
    end
end

fun builtin_list_method_call(c : CG.Compiler, obj : String, acc : String, call_args : Ast.Expr[], target : CG.Target) : String do 
    val args_compiled : String[] := for arg in call_args do 
        compile_expr(c, arg, CG.UsedDirectly())
    end;

    val res_expr := match acc do 
        case "push" := obj+".add("+(args_compiled[0]+")");
        case "pop" := obj+".remove("+obj+".size() - 1)";
        case "peek" := obj+".get("+obj+".size() - 1)";
        case "dequeue" := obj+".remove(0)";
        case "prepend" := obj+".add(0, "+(args_compiled[0]+")");
        case "append" := obj+".addAll("+(args_compiled[0]+")");
    end;

    match target do 
        case Ignore() := do 
            c.append(res_expr); c.append(";");
            c.newline();
            ""
        end;
        case Return() := return_stmt(c, res_expr);
        case UsedDirectly() := do 
            val temp_var := c.new_var();
            c.append("var "+temp_var+" = "+res_expr+";"); c.newline();
            temp_var
        end;
        case AssignTo(s) := assign(c, s, res_expr);
    end
end

fun compile_instantiated(c : CG.Compiler, instantiated : Ast.Expr, typarams : Ast.Type[], resulting_type : Ast.Type, target : CG.Target) : String do
    val Function(?, param_tys, ret_type) := resulting_type else panic("Generic non-function type: "+resulting_type);
    c.append("final "); c.append(TC.compile_type(c, resulting_type)); c.append(" ");
    val variable := c.new_var();
    c.append(variable); c.append(" = "); 
    val param_vars := for ty in param_tys do c.new_var() end;
    c.append("("); 
    var needs_comma := false;
    for i in [0..param_tys.length] do 
        if needs_comma do c.append(", "); end;
        c.append(TC.compile_type(c, param_tys[i]));c.append(" "); c.append(param_vars[i]);
        needs_comma := true;
    end;
    c.append(") -> {");
    // TODO: objekte sollten außerhalb kompiliert werden
    val prv := c.open_scope(c.current_env);
        for i in [0..param_vars.length] do 
            c.env.insert(param_vars[i], CG.VariableInfo(c.current_env.module_path));
            c.current_env.values.insert(param_vars[i], Ast.VarInfo(false, param_tys[i], param_vars[i], c.current_env));
        end;
        compile_expr(c, 
            Ast.FunctionCall(
                instantiated, 
                for i in [0..param_vars.length] 
                    do Ast.Identifier(param_vars[i], Util.wrap_linit.[Ast.Type](param_tys[i])) end), 
            CG.Return());
    c.append("};");
    c.close_scope(prv);
    use_with_target(c, variable, target)
end

fun compile_function_expr(
    c : CG.Compiler,
    params : Ast.Parameter[],
    return_type : Ast.Type,
    body : Ast.Expr,
    env : Ast.Namespace,
    target : CG.Target) : String
do 
    if val Ignore() := target do return ""; end;
    val complete_ty := Ast.Function([], Ast.param_types(params), return_type);
    var name := "";
    val temp_var := match target do 
        case UsedDirectly() := do 
            name := c.new_var();
            Ast.Variable(name)
        end;
        case Return() := Ast.Variable("");
        case AssignTo(setter) := setter;
    end;
    match target do 
        case UsedDirectly() := do 
            c.append("final "); c.append(TC.compile_type(c, complete_ty)); c.append(" "); c.append(name); c.append(" = (");
        end;
        case AssignTo(Variable(n)) := do 
            c.append(n); c.append(" = (");
        end;
        case AssignTo(WildcardSetter()) := do 
            return ""; // Wildcard setter means value is unused, function expressions have no side effect
        end;
        case AssignTo(IndexSetter(lst, idx)) := do 
            val list := compile_expr(c, lst, CG.UsedDirectly());
            val index := compile_expr(c, idx, CG.UsedDirectly());
            c.append(list+".set("+index+", (");
        end;
        case AssignTo(Property(obj, prop_name, ?)) := do 
            val object := compile_expr(c, obj, CG.UsedDirectly());
            c.append(object+"."+prop_name+" = (");
        end;
        case Return() := do 
            c.append("return (");
        end;
    end;
    val prv := c.open_scope(env);
    var needs_comma := false;
    val prev_expect_ref_ty := c.expect_ref_ty;
    c.expect_ref_ty := true;
    for param in params do 
        if needs_comma do 
            c.append(", ");
        end;
        match param do 
            case NormalParam(param_name, ty) := do 
                c.env.insert(param_name, CG.VariableInfo(c.current_env.module_path));
                c.append(TC.compile_type(c, ty)); c.append(" "); c.append(param_name);
            end;
        end;
        needs_comma := true;
    end; 
    c.expect_ref_ty := prev_expect_ref_ty;

    val body_is_block := if val BlockExpr(?, ?, ?, ?) := body then true else false;

    c.append(") -> ");
    if !body_is_block do 
        c.append("{");
        c.indent(); c.newline();
    end
    
    compile_expr(c, body, CG.Return());
    c.strip_trailing();
    if !body_is_block then do
        c.dedent(); c.newline();
        if val AssignTo(IndexSetter(?, ?)) := target do 
            c.append(")");
        end;
        c.append("};"); c.newline();
    end else do 
        if val AssignTo(IndexSetter(?, ?)) := target do 
            c.append(")");
        end;
        c.append(";"); c.newline();
    end;

    c.close_scope(prv);
    name
end

fun compile_property(
    c : CG.Compiler, 
    obj : Ast.Expr,
    name : String, 
    at : Ast.AccessType, 
    obj_ty : Ast.Type, 
    field_ty : Ast.Type, 
    target : CG.Target) : String 
do 
    if val Ignore() := target then do 
        compile_expr(c, obj, target)
    end else do // Target cannot be Ignore
        match at do 
            case FieldAccess() := do
                val subexpr := compile_expr(c, obj, CG.UsedDirectly());
                val fieldAccess := if val ListOf(?) := obj_ty 
                    then builtin_list_property(name, subexpr) 
                    else subexpr + "." + name;
                use_with_target(c, fieldAccess, target)
            end;
            case MethodAccess() := do 
                val temp_var := c.new_var();
                c.append("final "); c.append(TC.compile_type(c, obj_ty)); c.append(" "); 
                c.append(temp_var); c.append(";"); c.newline();

                compile_expr(c, obj, CG.AssignTo(Ast.Variable(temp_var)));
                val methodAccess := if val ListOf(?) := obj_ty 
                    then builtin_list_method(c, temp_var, name) 
                    else temp_var + "::"+name; // Create method reference. Let java create lambda
                match target do 
                    case AssignTo(s) := assign(c, s, methodAccess);
                    case Return() := return_stmt(c, methodAccess);
                    case UsedDirectly() := do 
                        val resulting_var := c.new_var();
                        c.append("final "); c.append(TC.compile_type(c, field_ty)); c.append(" "); c.append(resulting_var); 
                        c.append(" = "); c.append(methodAccess); c.append(";"); c.newline();
                        resulting_var
                    end;
                end
            end;
            case ModuleAccessed() := do 
                val nmsp := CG.namespace_for_path(c, obj);
                val mod_info := CG.var_info_for_namespace(c, nmsp);
                val accessed_info := mod_info.get(name);
                val accessed_path := SFG.path_to_generated_module(c.sfg, nmsp.module_path, false);
                val access_compiled := if accessed_info.is_constructor 
                    then accessed_path+"."+name+"::new"
                    else if accessed_info.is_no_fc_fn
                        then accessed_path+"::"+name 
                        else accessed_path+"."+name;
                use_with_target(c, access_compiled, target)
            end;
        end
    end
end

fun builtin_list_property(name : String, subexpr : String) : String := match name do 
    case "length" := "(double) ("+subexpr+".size())";
    case "first" := subexpr+".get(0)";
    case "last" := subexpr+".get("+subexpr+".size() - 1)";
end;
fun builtin_list_method(c : CG.Compiler, tempvar : String, method : String) : String := match method do 
    case "push" := do 
        val arg := c.new_var();
        "(var "+arg+") -> {"+tempvar+".add("+arg+"); return null;}"
    end;
    case "pop" := "() -> "+tempvar+".remove("+tempvar+".size() - 1)";
    case "peek" := "() -> "+tempvar+".get("+tempvar+".size() - 1)";
    case "dequeue" := "() -> "+tempvar+".remove(0)";
    case "prepend" := do 
        val arg := c.new_var();
        "(var "+arg+") -> "+tempvar+".add(0, "+arg+")"
    end;
    case "append" := do 
        val arg := c.new_var();
        "(var "+arg+") -> "+tempvar+".addAll("+arg+")"
    end;
end;

fun compile_index(c : CG.Compiler, lst : Ast.Expr, idx : Ast.Expr, list_ty : Ast.Type, target : CG.Target) : String do
    if val Ignore() := target then do
        compile_expr(c, lst, CG.Ignore());
        compile_expr(c, idx, CG.Ignore());
        ""
    end else do
        val indexed := compile_expr(c, lst, CG.UsedDirectly());
        val index := compile_expr(c, idx, CG.UsedDirectly());
        val compiled := match list_ty do 
            case StringT() := "Character.toString("+indexed+".charAt(__toIndex("+index+")))"; 
            case ? := indexed+".get(__toIndex("+index+"))" ;
        end;
        use_with_target(c, compiled, target)
    end
end

fun compile_return(c : CG.Compiler, ret : Ast.Expr, needed_ty : Ast.Type, target : CG.Target) : String do 
    c.append("if(true) {"); c.indent(); c.newline();
    compile_expr(c, ret, CG.Return()); c.dedent(); c.newline();
    c.append("}");
    use_with_target(c, default_value(needed_ty), target)
end

fun compile_break(c : CG.Compiler, expected_ty : Ast.Type, target : CG.Target) : String do 
    c.append("if(true) break "+c.loop_labels.last+";"); c.newline();
    use_with_target(c, default_value(expected_ty), target)
end

fun assign(c : CG.Compiler, to : Ast.Setter, from : String) : String do
    match to do 
        case Variable(name) := do 
            if from = "()" do panic("Got just ()"); end;
            c.append(CG.maybe_upvalue(c, name, ""));
            c.append(" = ");
            c.append(from);
            c.append(";");
            c.newline();
        end;
        case WildcardSetter() := do c.append("__ignore("+from+");"); c.newline(); end;
        case TupleSetter(parts, t) := do 
            val temp_var := c.new_var();
            c.append("final "); c.append(TC.compile_type(c, t.get())); c.append(" "); c.append(temp_var);
            c.append(" = "); c.append(from); c.append(";"); c.newline();
            for i in [0..parts.length] do 
                assign(c, parts[i], temp_var+".field"+i+"()");
            end;
        end;
        case IndexSetter(obj, idx) := do 
            val list := compile_expr(c, obj, CG.UsedDirectly());
            val idx_compiled := compile_expr(c, idx, CG.UsedDirectly());
            c.append(list+".set(__toIndex("+idx_compiled+"), "+from+");"); c.newline();
        end;
        case Property(obj, name, ct) := do 
            val object := compile_expr(c, obj, CG.UsedDirectly());
            c.append(object); c.append("."); c.append(name); c.append(" = "); c.append(from); c.append(";"); c.newline();
        end;
    end;
    ""
end

fun return_stmt(c : CG.Compiler, expr : String) : String do 
    c.append("return "); c.append(expr); c.append(";"); c.newline();
    ""
end 