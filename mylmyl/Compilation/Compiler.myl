module Compilation.Compiler;

import SFG := IO.SourceFileGatherer;
import Env := Syntax.Env;
import CG := Compilation.CodeGenerator;
import GVG := Compilation.GlobalVariableGatherer;
import CB := Compilation.CodeBuffers;
import TG := Compilation.TypeGenerator;

fun compile(
    file : SFG.SourceFile, 
    name_gen : CB.NameGenerator, 
    infos : Env.AList(Env.Env(CG.VariableInfo)),
    generated_path : String[], 
    type_buffer : CB.UncreatedTypes,
    sfg : SFG.SFGatherer) : String 
do 
    CG.compile(file, name_gen, infos, generated_path, type_buffer, sfg)
end

fun gather_global_variable_info(files : Env.AList(SFG.SourceFile)) : Env.AList(Env.Env(Compilation.CodeGenerator.VariableInfo)) do 
    GVG.gather_global_variable_info(files)
end

fun generate_types(path : String, types : CB.UncreatedTypes, name_gen : CB.NameGenerator) do 
    TG.compile_types(path, types, name_gen);
end