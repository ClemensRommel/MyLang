module Analyze;

import Ast;
import Env;
import Util;

// Search for mutable variables that are captured by functions in this block
fun analyze_captures(stmts : Ast.Stmt[], last : Util.Optional(Ast.Expr)) : Env.AList(Bool) do
    val scan_env : Env.AList(Bool) := Env.AList.[Bool]();
    for stmt in stmts do 
        analyze_stmt(scan_env, stmt);   
    end;
    if val Some(e) := last then do 
        analyze_expr(scan_env, e);
    end else do end;
    scan_env
end

fun mentions_var(expr : Ast.Expr, name : String) : Bool := match expr do
    case DesugarableExpr(content) := mentions_var(content.get(), name);
    case NumberLiteral(?) := false;
    case StringLiteral(?) := false;
    case Boolean(?) := false;
    case NullLiteral() := false;
    case Identifier(n, ?) := n = name;
    case BinaryOperation(?, left, right) := mentions_var(left, name) or mentions_var(right, name);
    case UnaryOperation(?, part) := mentions_var(part, name);
    case FunctionCall(callee, called) := mentions_var(callee, name) or 
                                         Util.any.[Ast.Expr](called, fun(t : Ast.Expr) : Bool := mentions_var(t, name));
                                        // Name shadowing is not allowed. If it will be, this has to change
    case FunctionExpr(?, ?, body, ?) := mentions_var(body, name);
    case IfExpr(?, cond, th, el) := mentions_var(cond, name) or mentions_var(th, name) or mentions_var(el, name);
    case PropertyExpr(obj, ?, ?, ?, ?) := mentions_var(obj, name);
    case TupleExpr(parts, ?) := Util.any.[Ast.Expr](parts, fun(t : Ast.Expr) : Bool := mentions_var(t, name));
    case BlockExpr(parts, last, ?, ?) := Util.any.[Ast.Stmt](parts, fun(t : Ast.Stmt) : Bool := stmt_mentions_var(t, name)) or 
                                         if val Some(l) := last then mentions_var(l, name) else false;
    case ThisExpr() := false;
    case InstantiationExpr(instantiated, ?, ?) := mentions_var(instantiated, name);
    case ListExpr(exprs, ?) := Util.any.[Ast.Expr](exprs, fun(t : Ast.Expr) : Bool := mentions_var(t, name));
    case IndexExpr(lst, idx, ?) := mentions_var(lst, name) or mentions_var(idx, name);
    case MatchExpr(matched, arms, ?, ?) := mentions_var(matched, name) or do 
        var mentions := false;
        for (?, e, ?) in arms do 
            mentions := mentions or mentions_var(e, name);
        end;
        mentions
    end;
    case ForExpr(loop_var, iterated, body, ?, ?, ?) := mentions_var(iterated, name) or mentions_var(body, name);
    case WhileExpr(cond, body, ?, ?) := mentions_var(cond, name) or mentions_var(body, name);
    case RangeExpr(start_expr, end_expr) := mentions_var(start_expr, name) or mentions_var(end_expr, name);
    case ReturnExpr(ret, lty) := mentions_var(ret, name);
    case Break(?) := false;
end;

fun stmt_mentions_var(stmt : Ast.Stmt, name : String) : Bool := match stmt do
    case ExprStmt(expr) := mentions_var(expr, name);
    case SetStatement(setter, expr) := setter_mentions_var(setter, name) or mentions_var(expr, name);
    case Declaration(decl) := decl_mentions_var(decl, name);
    case IfStmt(cond, body) := mentions_var(cond, name) or mentions_var(body, name);
    case EmptyStmt() := false;
end;

fun setter_mentions_var(setter : Ast.Setter, name : String) : Bool := match setter do
    case Variable(n) := n = name;
    case WildcardSetter() := false;
    case TupleSetter(parts, ?) := Util.any.[Ast.Setter](parts, fun(t : Ast.Setter) : Bool := setter_mentions_var(t, name));
    case Property(obj, ?, ?) := mentions_var(obj, name);
end;

fun decl_mentions_var(decl : Ast.Decl, name : String) : Bool := match decl do
    case VarDecl(?, ?, init, ?, ?) := if val Some(e) := init then mentions_var(e, name) else false;
    case FunDecl(?, ?, ?, ?, body, ?, ?) := mentions_var(body, name);
    case ClassDecl(?, ?, members, constr, ?, ?) := Util.any.[Ast.Decl](members, fun(t : Ast.Decl) : Bool := decl_mentions_var(t, name))
                                                or (if val Some(c) := constr
                                                then constr_mentions_var(c, name) else false);
end;

fun constr_mentions_var(constr : Ast.Constructor, name : String) : Bool := mentions_var(constr.body, name);
    

fun analyze_stmt(scan_env : Env.AList(Bool), stmt : Ast.Stmt) do 
    match stmt do
        case ExprStmt(expr) := analyze_expr(scan_env, expr);
        case SetStatement(setter, arg) := analyze_expr(scan_env, arg);
        case Declaration(decl) := analyze_decl(scan_env, decl);
        case IfStmt(cond, body) := do 
            analyze_expr(scan_env, cond); 
            analyze_expr(scan_env, body); 
        end;
        case EmptyStmt() := null;
    end;
end

// Search for possible captures in this declaration
fun analyze_decl(scan_env : Env.AList(Bool), decl : Ast.Decl) do 
    match decl do 
        case DesugarableDecl(md) := analyze_decl(scan_env, md.get());
        case VarDecl(setter, ty, init, mut, ?) := do 
            if mut do 
                insert_vars(scan_env, setter); // Possible mutable variable that is captured
            end
            if val Some(e) := init then do 
                analyze_expr(scan_env, e);
            end else do end;
        end;
        case EmptyDecl() := do end;
        case FunDecl(name, typarams, parameters, ret_type, body, ?, ?) := scan_expr(scan_env, body);
    end;
end

fun insert_vars(scan_env : Env.AList(Bool), setter : Ast.Setter) do 
    match setter do 
        case Variable(name) := scan_env.insert(name, false);
        case TupleSetter(parts, ?) := do 
            for part in parts do 
                insert_vars(scan_env, part);
            end; 
        end;
        case WildcardSetter() := do end;
    end;
end

// Search for possible captures in this function
fun analyze_expr(scan_env : Env.AList(Bool), expr : Ast.Expr) do 
    match expr do 
        case DesugarableExpr(content) := analyze_expr(scan_env, content.get());
        case BinaryOperation(?, left, right) := do 
            analyze_expr(scan_env, left);
            analyze_expr(scan_env, right);
        end;
        case UnaryOperation(?, operand) := analyze_expr(scan_env, operand);
        case FunctionCall(callee, call_args) := do 
            analyze_expr(scan_env, callee);
            for arg in call_args do 
                analyze_expr(scan_env, arg);
            end;
        end;
        case InstantiationExpr(instantiated, ?, ?) := analyze_expr(scan_env, instantiated);
        case IfExpr(?, thenBranch, elseBranch, cond) := do 
            analyze_expr(scan_env, cond);
            analyze_expr(scan_env, thenBranch);
            analyze_expr(scan_env, elseBranch);
        end;
        case BlockExpr(stmts, last, ?, ?) := do 
            for stmt in stmts do 
                analyze_stmt(scan_env, stmt);
            end;        
            if val Some(e) := last then do 
                analyze_expr(scan_env, e);
            end else do end;
        end;
        case FunctionExpr(?, ?, body, ?) := do 
            scan_expr(scan_env, body); // Important part : Switch to scan mode
        end;
        case ListExpr(exprs, ?) := do
            for e in exprs do
                analyze_expr(scan_env, e);
            end;
        end;
        case IndexExpr(lst, idx, ?) := do
            analyze_expr(scan_env, lst);
            analyze_expr(scan_env, idx);
        end;
        case PropertyExpr(obj, ?, ?, ?, ?) := analyze_expr(scan_env, obj);
        case TupleExpr(exprs, ?) := do
            for e in exprs do
                analyze_expr(scan_env, e);
            end;
        end;
        case RangeExpr(start_expr, end_expr) := do 
            analyze_expr(scan_env, start_expr);
            analyze_expr(scan_env, end_expr);
        end;
        case WhileExpr(cond, body, ?, ?) := do 
            analyze_expr(scan_env, cond);
            analyze_expr(scan_env, body);
        end;
        case ForExpr(?, iterated, body, ?, ?, ?) := do 
            analyze_expr(scan_env, iterated);
            analyze_expr(scan_env, body);
        end;
        case MatchExpr(matched, arms, ?, ?) := do 
            analyze_expr(scan_env, matched);
            for (?, e, ?) in arms do 
                analyze_expr(scan_env, e);
            end;
        end;
        case ReturnExpr(ret, lty) := do analyze_expr(scan_env, ret); end;
        case NumberLiteral(?) := do end; case Identifier(?, ?) := do end; case StringLiteral(?) := do end; 
        case Boolean(?) := do end; case NullLiteral() := do end; case ThisExpr() := do end; case Break(?) := do end;
    end;
end

fun scan_expr(scan_env : Env.AList(Bool), expr : Ast.Expr) do 
    match expr do 
        case DesugarableExpr(content) := scan_expr(scan_env, content.get());
        case BinaryOperation(?, left, right) := do 
            scan_expr(scan_env, left);
            scan_expr(scan_env, right);
        end;
        case UnaryOperation(?, operand) := scan_expr(scan_env, operand);
        case FunctionCall(callee, call_args) := do 
            scan_expr(scan_env, callee);
            for arg in call_args do 
                scan_expr(scan_env, arg);
            end;
        end;
        case InstantiationExpr(instantiated, ?, ?) := scan_expr(scan_env, instantiated);
        case IfExpr(?, thenBranch, elseBranch, cond) := do 
            scan_expr(scan_env, cond);
            scan_expr(scan_env, thenBranch);
            scan_expr(scan_env, elseBranch);
        end;
        case BlockExpr(stmts, last, ?, ?) := do 
            for stmt in stmts do 
                scan_stmt(scan_env, stmt);
            end;        
            if val Some(e) := last then do 
                scan_expr(scan_env, e);
            end else do end;
        end;
        case FunctionExpr(?, ?, body, ?) := do 
            scan_expr(scan_env, body); // Important part : Switch to scan mode
        end;
        case Identifier(name, ?) := do 
            mark(scan_env, name);
        end;
        case ListExpr(exprs, ?) := do
            for e in exprs do
                scan_expr(scan_env, e);
            end;
        end;
        case IndexExpr(lst, idx, ?) := do
            scan_expr(scan_env, lst);
            scan_expr(scan_env, idx);
        end;
        case PropertyExpr(obj, ?, ?, ?, ?) := scan_expr(scan_env, obj);
        case TupleExpr(exprs, ?) := do
            for e in exprs do
                scan_expr(scan_env, e);
            end;
        end;
        case RangeExpr(start_expr, end_expr) := do 
            scan_expr(scan_env, start_expr);
            scan_expr(scan_env, end_expr);
        end;
        case WhileExpr(cond, body, ?, ?) := do 
            scan_expr(scan_env, cond);
            scan_expr(scan_env, body);
        end;
        case ForExpr(?, iterated, body, ?, ?, ?) := do 
            scan_expr(scan_env, iterated);
            scan_expr(scan_env, body);
        end;
        case MatchExpr(matched, arms, ?, ?) := do 
            scan_expr(scan_env, matched);
            for (?, e, ?) in arms do 
                scan_expr(scan_env, e);
            end;
        end;
        case ReturnExpr(ret, lty) := do scan_expr(scan_env, ret); end;
        case NumberLiteral(?) := do end; case StringLiteral(?) := do end; case Boolean(?) := do end; 
        case NullLiteral() := do end; case ThisExpr() := do end; case Break(?) := do end;
    end;
end

fun mark(scan_env : Env.AList(Bool), name : String) do 
    if scan_env.has(name) do // Variable is searched for
        scan_env.update(name, true); // Variable is captured and must be compiled differently
    end;
end

fun scan_stmt(scan_env : Env.AList(Bool), stmt : Ast.Stmt) do 
    match stmt do
        case ExprStmt(expr) := scan_expr(scan_env, expr);
        case SetStatement(setter, arg) := do 
            scan_expr(scan_env, arg);
            scan_setter(scan_env, setter);
        end;
        case IfStmt(cond, body) := do 
            scan_expr(scan_env, cond);
            scan_expr(scan_env, body);
        end;
        case Declaration(decl) := scan_decl(scan_env, decl);
        case EmptyStmt() := null;
    end;
end

fun scan_setter(scan_env : Env.AList(Bool), setter : Ast.Setter) do 
    match setter do 
        case Variable(name) := do 
            mark(scan_env, name);
        end;
        case WildcardSetter() := do end;
        case TupleSetter(elems, ?) := do 
            for e in elems do 
                scan_setter(scan_env, e);
            end;
        end;
        case Property(o, name, ?) := do 
            match o do 
                case Identifier(iname, ?) := do mark(scan_env, iname); end;
                case ? := do end; // Parts that are behind complex expressions do not need to be marked
            end
        end;
        case IndexSetter(lst, idx) := do end;
    end
end

fun scan_decl(scan_env : Env.AList(Bool), decl : Ast.Decl) do 
    match decl do 
        case DesugarableDecl(md) := scan_decl(scan_env, md.get());
        case EmptyDecl() := do end;
        case VarDecl(?, ?, init, ?, ?) := if val Some(e) := init then scan_expr(scan_env, e) else do end;
        case FunDecl(?, ?, ?, ?, body, ?, ?) := scan_expr(scan_env, body);
    end;
end
