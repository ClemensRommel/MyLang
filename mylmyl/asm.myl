module asm;

import ffiarray := std.ffi.array;

native class Label := "org.objectweb.asm.Label" where 
    new();
end;

native class MethodVisitor := "org.objectweb.asm.MethodVisitor" where 
    fun visitParameter(String, Int);
    fun visitCode();

    fun visitFieldInsn(Int, String, String, String);
    fun visitIincInsn(Int, Int);
    fun visitInsn(Int);
    fun visitIntInsn(Int, Int);
    fun visitLabel(Label);
    // fun visitInvokeDynamicInsn(String, String, Handle, Object..);
    fun visitJumpInsn(Int, Label);
    fun visitLdcInsn(JavaConstant);
    fun visitLineNumber(Int, Label);
    fun visitLocalVariable(String, String, String, Label, Label, Int);
    // visitLookupSwitchInsn(Label, ffiarray.IntArray, Array of Label);
    fun visitMethodInsn(Int, String, String, String, Bool);
    // visitMultiANewArrayInsn(String, Int);
    // fun visitTableSwitchInsn(Int, Int, Label, Label ...)
    // fun visitTryCatchBlock(Label, Label, Label, String)
    fun visitTypeInsn(Int, String);
    fun visitVarInsn(Int, Int);

    fun visitMaxs(Int, Int);
    
    fun visitEnd();
end;

native class FieldVisitor := "org.objectweb.asm.FieldVisitor" where 
    fun visitEnd();
end;

native class  JavaConstant := "java.lang.Object";

native fun field_init_value() : JavaConstant := "mylmyl.AsmHelp.create_field_init_value";
native fun field_init_value_string(String) : JavaConstant := "mylmyl.AsmHelp.field_iv_string";
native fun const_float(Float) : JavaConstant := "mylmyl.AsmHelp.const_float";
native fun field_init_value_number(Number) : JavaConstant := "mylmyl.AsmHelp.field_iv_number";
native fun field_init_value_int(Int) : JavaConstant := "mylmyl.AsmHelp.field_iv_int";
native fun field_init_value_long(Long) : JavaConstant := "mylmyl.AsmHelp.field_iv_long";

native fun null_str() : String := "mylmyl.AsmHelp.null_str";

native class ClassWriter := "org.objectweb.asm.ClassWriter" where 
    new(Int);

    fun hasFlags(Int) : Bool;

    fun visit(Int, Int, String, String, String, ffiarray.StringArray);
    fun visitEnd();
    fun visitMethod(Int, String, String, String, ffiarray.StringArray) : MethodVisitor;
    fun visitField(Int, String, String, String, JavaConstant) : FieldVisitor;
    fun visitPermittedSubclass(String);
    fun visitSource(String, String);

    fun toByteArray() : ffiarray.ByteArray;
end;

val V21 : Int := 65i;

val COMPUTE_FRAMES : Int := 1i;
val COMPUTE_MAXS : Int := 2i;

val ACC_PUBLIC : Int := 1i; // class, field, method
val ACC_PRIVATE : Int := 2i; // class, field, method
val ACC_PROTECTED : Int := 4i; // class, field, method
val ACC_STATIC : Int := 8i; // field, method
val ACC_FINAL : Int := 16i; // class, field, method, parameter
val ACC_SUPER : Int := 32i; // class
val ACC_SYNCHRONIZED : Int := 32i; // method
val ACC_OPEN : Int := 32i; // module
val ACC_TRANSITIVE : Int := 32i; // module requires
val ACC_VOLATILE : Int := 64i; // field
val ACC_BRIDGE : Int := 64i; // method
val ACC_STATIC_PHASE : Int := 64i; // module requires
val ACC_VARARGS : Int := 128i; // method
val ACC_TRANSIENT : Int := 128i; // field
val ACC_NATIVE : Int := 256i; // method
val ACC_INTERFACE : Int := 512i; // class
val ACC_ABSTRACT : Int := 1024i; // class, method
val ACC_STRICT : Int := 2048i; // method
val ACC_SYNTHETIC : Int := 4096i; // class, field, method, parameter, module 
val ACC_ANNOTATION  : Int := 8196i; // class
val ACC_ENUM : Int := 16348i; // class(?) field inner
val ACC_MANDATED : Int := 32768i; // field, method, parameter, module, module 
val ACC_MODULE : Int := 32768i; // class

// newarray
val T_BOOLEAN : Int := 4i;
val T_CHAR : Int := 5i;
val T_FLOAT : Int := 6i;
val T_DOUBLE : Int := 7i;
val T_BYTE : Int := 8i;
val T_SHORT : Int := 9i;
val T_INT : Int := 10i;
val T_LONG : Int := 11i;

val NOP : Int := 0i; // visitInsn
val ACONST_NULL : Int := 1i;
val ICONST_M1 : Int := 2i;
val ICONST_0 : Int := 3i;
val ICONST_1 : Int := 4i;
val ICONST_2 : Int := 5i;
val ICONST_3 : Int := 6i;
val ICONST_4 : Int := 7i;
val ICONST_5 : Int := 8i;
val LCONST_0 : Int := 9i;
val LCONST_1 : Int := 10i;
val FCONST_0 : Int := 11i;
val FCONST_1 : Int := 12i;
val FCONST_2 : Int := 13i;
val DCONST_0 : Int := 14i;
val DCONST_1 : Int := 15i;
val BIPUSH : Int := 16i; // visitIntInsn
val SIPUSH : Int := 17i;
val LDC : Int := 18i; // visitLdcInsn
val ILOAD : Int := 21i; // visitVarInsn
val LLOAD : Int := 22i;
val FLOAD : Int := 23i;
val DLOAT : Int := 24i;
val ALOAD : Int := 25i;
val IALOAD : Int := 46i; // visitInsn
val LALOAD : Int := 47i; 
val FALOAD : Int := 48i;
val DALOAD : Int := 49i;
val AALOAD : Int := 50i;
val BALOAD : Int := 51i;
val CALOAD : Int := 52i;
val SALOAD : Int := 53i;
val ISTORE : Int := 54i; // visitVarInsn
val LSTORE : Int := 55i;
val FSTORE : Int := 56i;
val DSTORE : Int := 57i;
val ASTORE : Int := 58i;
val IASTORE : Int := 79i; // visitInsn
val LASTORE : Int := 80i;
val FASTORE : Int := 81i;
val DASTORE : Int := 82i;
val AASTORE : Int := 83i;
val BASTORE : Int := 84i;
val CASTORE : Int := 85i;
val SASTORE : Int := 86i;
val POP : Int := 87i;
val POP2 : Int := 88i;
val DUP : Int := 89i;
val DUP_X1 : Int := 90i;
val DUP_X2 : Int := 91i;
val DUP2 : Int := 92i;
val DUP2_X1 : Int := 93i;
val DUP2_X2 : Int := 94i;
val SWAP : Int := 95i;
val IADD : Int := 96i;
val LADD : Int := 97i;
val FADD : Int := 98i;
val DADD : Int := 99i;
val ISUB : Int := 100i;
val LSUB : Int := 101i;
val FSUB : Int := 102i;
val DSUB : Int := 103i;
val IMUL : Int := 104i;
val LMUL : Int := 105i;
val FMUL : Int := 106i;
val DMUL : Int := 107i;
val IDIV : Int := 108i;
val LDIV : Int := 109i;
val FDIV : Int := 110i;
val DDIV : Int := 111i;
val IREM : Int := 112i;
val LREM : Int := 113i;
val FREM : Int := 114i;
val DREM : Int := 115i;
val INEG : Int := 116i;
val LNEG : Int := 117i;
val FNEG : Int := 118i;
val DNEG : Int := 119i;
val ISHL : Int := 120i;
val LSHL : Int := 121i;
val ISHR : Int := 122i;
val LSHR : Int := 123i;
val IUSHR : Int := 124i;
val LUSHR : Int := 125i;
val IAND : Int := 126i;
val LAND : Int := 127i;
val IOR : Int := 128i;
val LOR : Int := 129i;
val IXOR : Int := 130i;
val LXOR : Int := 131i;
val IINC : Int := 132i; // visitIincInsn
val I2L : Int := 133i; // visitInsn
val I2F : Int := 134i;
val I2D : Int := 135i;
val L2I : Int := 136i;
val L2F : Int := 137i;
val L2D : Int := 138i;
val F2I : Int := 139i;
val F2L : Int := 140i;
val F2D : Int := 141i;
val D2I : Int := 142i;
val D2L : Int := 143i;
val D2F : Int := 144i;
val I2B : Int := 145i;
val I2C : Int := 146i;
val I2S : Int := 147i;
val LCMP : Int := 148i;
val FCMPL : Int := 149i;
val FCMPG : Int := 150i;
val DCMPL : Int := 151i;
val DCMPG : Int := 152i;
val IFEQ : Int := 153i; // visitJumpInsn
val IFNE : Int := 154i;
val IFLT : Int := 155i;
val IFGE : Int := 156i;
val IFGT : Int := 157i;
val IFLE : Int := 158i;
val IF_ICMPEQ : Int := 159i;
val IF_ICMPNE : Int := 160i;
val IC_ICMPLT : Int := 161i;
val IF_ICMPGE : Int := 162i;
val IF_ICMPGT : Int := 163i;
val IF_ICMPLE : Int := 164i;
val IF_ACMPEQ : Int := 165i;
val IF_ACMPNE : Int := 166i;
val GOTO : Int := 167i;
val JSR : Int := 168i;
val RET : Int := 189i; // visitVarInsn
val TABLESWITCH : Int := 170i; // visitTableSwitchInsn
val LOOKUPSWITCH : Int := 171i; // visitLookupSwitch
val IRETURN : Int := 172i; // visitInsn
val LRETURN : Int := 173i;
val FRETURN : Int := 174i;
val DRETURN : Int := 175i;
val ARETURN : Int := 176i;
val RETURN : Int := 177i;
val GETSTATIC : Int := 178i; // visitFieldInsn
val PUTSTATIC : Int := 179i;
val GETFIELD : Int := 180i;
val PUTFIELD : Int := 181i;
val INVOKEVIRTUAL : Int := 182i; // visitMethodInsn
val INVOKESPECIAL : Int := 183i;
val INVOKESTATIC : Int := 184i;
val INVOKEINTERFACE : Int := 185i;
val INVOKEDYNAMIC : Int := 186i; // visitInvokeDynamicInsn
val NEW : Int := 187i; // visitTypeInsn
val NEWARRAY : Int := 188i; // visitIntInsn
val ANEWARRAY : Int := 189i; // visitTypeInsn
val ARRAYLENGTH : Int := 190i; // visitInsn
val ATHROW : Int := 181i;
val CHECKCAST : Int := 192i; // visitTypeInsn
val INSTANCEOF : Int := 193i;
val MONITORENTER : Int := 194i; // visitInsn
val MONITOREXIT : Int := 195i;
val MULTIANEWARRAY : Int := 197i; // visitMultiANewArrayInsn
val IFNULL : Int := 198i; // visitJumpInsn
val IFNONNULL : Int := 199i;