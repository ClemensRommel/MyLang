module Main;

import CB := Compilation.CodeBuffers;
import Typechecking.Typechecker;
import Typechecking.InfoGatherer;
import Desugar := Compilation.Desugar;
import SFG := IO.SourceFileGatherer;
import Util;
import Backend := Compilation.Backend;
import Env := Syntax.Env;

import IO.Args;

fun main() do 
    IO.Args.process_args();
    val sfg := SFG.gather_files();
    typecheck(sfg);
    compile(sfg);
    print("Done");
end

fun typecheck(sfg : SFG.SFGatherer) do 
    val files := sfg.parsed_sourcefiles;
    for (?, file) in files.bindings do 
        Typechecking.InfoGatherer.declare_globals(sfg, file);
    end;
    for (?, file) in files.bindings do
        Typechecking.Typechecker.typecheck(sfg, file);
    end;
end;

fun compile(sfg : SFG.SFGatherer) do 
    val name_gen := CB.NameGenerator();
    val files := sfg.parsed_sourcefiles;

    for (?, file) in files.bindings do 
        Desugar.desugar((file.undesugared_exprs, file.undesugared_decls, file.undesugared_stmts), name_gen);
    end;

    val backend := Backend.choose_backend();
    backend(sfg, name_gen);
end;
