module Main;

import Compiler;
import Compilation.CodeBuffers;
import Typechecker;
import Desugar;
import NameGen;
import SourceFileGatherer;
import Util;

fun main() do 
    val cli_args := args();
    if cli_args.length != 1 do 
        panic("Invalid argument count: Only 1 is allowed (input file)");
    end
    val files := SourceFileGatherer.gather_files(cli_args[0]);
    val path_to_generated_code := SourceFileGatherer.generated_code_path(cli_args[0]);
    for (?, file) in files.bindings do 
        Typechecker.declare_globals(file);
    end;
    for (?, file) in files.bindings do
        Typechecker.typecheck(file, files);
    end
    val name_gen := NameGen.NameGenerator();
    for (?, file) in files.bindings do 
        Desugar.desugar((file.undesugared_exprs, file.undesugared_decls), name_gen);
    end
    val global_info := Compiler.gather_global_variable_info(files);
    val ungenerated_types : Compilation.CodeBuffers.UncreatedTypes[] := [];
    for (path, file) in files.bindings do 
        val (compiled, ungenerated) := Compiler.compile(file, name_gen, global_info, path_to_generated_code);
        Util.outputFile(path, compiled);
        ungenerated_types.push(ungenerated);
    end
    Compiler.generate_types(join("/", path_to_generated_code) + ".myl", ungenerated_types, name_gen);
end

