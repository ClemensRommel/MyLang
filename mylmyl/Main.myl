module Main;

import Compiler;
import Compilation.CodeBuffers;
import Typechecking.Typechecker;
import Typechecking.InfoGatherer;
import Desugar;
import NameGen;
import SourceFileGatherer;
import Util;

fun main() do 
    val cli_args := args();
    if cli_args.length != 1 do 
        panic("Invalid argument count: Only 1 is allowed (input file)");
    end
    val sfg := SourceFileGatherer.gather_files(cli_args[0]);
    val files := sfg.parsed_sourcefiles;
    val path_to_generated_code := SourceFileGatherer.generated_code_path(cli_args[0]);
    for (?, file) in files.bindings do 
        Typechecking.InfoGatherer.declare_globals(sfg, file);
    end;
    for (?, file) in files.bindings do
        Typechecking.Typechecker.typecheck(file);
    end;
    val name_gen := NameGen.NameGenerator();
    for (?, file) in files.bindings do 
        Desugar.desugar((file.undesugared_exprs, file.undesugared_decls), name_gen);
    end;
    val global_info := Compiler.gather_global_variable_info(files);
    val ungenerated_types : Compilation.CodeBuffers.UncreatedTypes := Compilation.CodeBuffers.UncreatedTypes();
    for (path, file) in files.bindings do 
        print("== Compiling "+path+" ==");
        val compiled := Compiler.compile(file, name_gen, global_info, path_to_generated_code, ungenerated_types, sfg);
        Util.outputFile(output_path(path), compiled);
        move_line_up();
    end;
    Compiler.generate_types(sfg.file_prefix + join("/", path_to_generated_code) + ".myl", ungenerated_types, name_gen);
    print("Done");
end

fun output_path(str : String) : String do 
    val parts := split(str, "/");
    var out := "";
    var need_slash := false;
    for i in [0..parts.length - 1] do 
        if need_slash do out := out + "/"; end;
        val part := parts[i];
        out := out + part;
        need_slash := true;
    end;
    val last_part := parts[parts.length-1];
    out := out + (if need_slash then "/" else "") + "_"+last_part;
    out
end
