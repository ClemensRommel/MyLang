module Typechecking.ExprInferrer;

import Ast := Syntax.Ast;
import Env := Syntax.Env;

import EC := Typechecking.ExprChecker;
import TC := Typechecking.Typechecker;
import TR := Syntax.TypeResolver;
import SC := Typechecking.StmtChecker;
import DC := Typechecking.DeclChecker;
import KC := Typechecking.Kindchecker;
import PC := Typechecking.PatternChecker;

import Subst := Typechecking.Substitute;

import Util;

// Return type is always fully resolved
fun infer(t : TC.Typechecker, e : Ast.Expr) : Ast.Type := match e do 
    case WildCardExpression() := panic("Error: ? is not a valid expression");
    case DesugarableExpr(content) := infer(t, content.get());
    case NumberLiteral(?) := Ast.NumberT();
    case Boolean(?) := Ast.BooleanT();
    case StringLiteral(?) := Ast.StringT();
    case NullLiteral() := Ast.VoidT();
    case ThisExpr() := do 
        if not t.is_in_class do 
            panic("Cannot use 'this' outside of a class");
        end
        t.type_of_var("this")
    end;
    case Identifier(name, lty) := do 
        if matches(name, "__.*") do 
            panic("Names may not start with __: '"+name+"'")
        end;
        val res := t.type_of_var(name);
        lty.init(res);
        res
    end;
    case BinaryOperation(op, lhs, rhs) := infer_binary(t, op, lhs, rhs);
    case UnaryOperation(op, operand) := infer_unary(t, op, operand);
    case IfExpr(linit, cond, thenBr, elseBr) := do 
        t.open_scope();
            EC.check_condition(t, cond);
            val ret_type := infer(t, thenBr);
        t.close_scope();
        EC.check(t, elseBr, ret_type);
        linit.init(ret_type);
        ret_type
    end;
    case FunctionExpr(params, return_type, body, lenv) := infer_function(t, params, return_type, body, lenv);
    case BlockExpr(stmts, end_expr, lt, lenv) := infer_block(t, stmts, end_expr, lt, lenv);
    case ForExpr(setter, iterated, body, lenv, lt, lit) := infer_for(t, setter, iterated, body, lenv, lt, lit);
    case WhileExpr(cond, body, lty) := infer_while(t, cond, body, lty);
    case FunctionCall(callee, fargs) := do 
        val callee_type := infer(t, callee);
        // TODO: Generics
        val Function(typarams, param_types, ret_type) := callee_type else do 
            panic("Cannot call non-function-type "+callee_type+" in "+e)
        end;
        if param_types.length != fargs.length do 
            panic("Error: tried to call function "+callee+" with "+fargs.length+
                " parameters, but "+callee+" expects "+param_types.length+" parameters");
        end;
        for i in [0..fargs.length] do 
            EC.check(t, fargs[i], param_types[i]);
        end;
        ret_type
    end;
    case InstantiationExpr(instantiated, typarams, lty) := do 
        val instantiated_ty := infer(t, instantiated);
        val Function(expected_typarams, valparams, retty) := instantiated_ty 
            else panic("Cannot instantiate non-generic type: "+instantiated_ty);
        if typarams.length != expected_typarams.length do 
            panic("Error: Expected "+expected_typarams.length
                  +" type parameters, got "+typarams.length+" type parameters in "+e);
        end 
        val typaram_substitutes : Env.AList(Ast.Type) := Env.AList.[Ast.Type]();
        for i in [0..typarams.length] do 
            typaram_substitutes.insert(expected_typarams[i].name, typarams[i]);
        end;
        val sty := Subst.substitute(instantiated_ty, typaram_substitutes);
        lty.init(sty);
        sty
    end;
    case TupleExpr(subexprs, lt) := do 
        val types : Ast.Type[] := [];
        for expr in subexprs do 
            types.push(infer(t, expr));
        end;
        val resulting := Ast.Tuple(types);
        lt.init(resulting);
        resulting
    end;
    case ListExpr(subexprs, lt) := do 
        val lty : Ast.Type := if subexprs.length = 0 then 
            panic("Cannot infer type of empty list")
        else if subexprs.length = 10 then 
            Ast.ListOf(infer(t, subexprs.first))
        else do 
            val ty := infer(t, subexprs.first);
            for i in [1..subexprs.length] do 
                EC.check(t, subexprs[i], ty);
            end;
            Ast.ListOf(ty)
        end;
        lt.init(lty);
        lty
    end;
    case RangeExpr(start, end_expr) := do 
        EC.check(t, start, Ast.NumberT());
        EC.check(t, end_expr, Ast.NumberT());
        Ast.ListOf(Ast.NumberT())
    end;
    case PropertyExpr(obj, name, la, lt, lft) := if val Module(path) := accessed_object(t, obj) then do  
        val imported_names := TR.get_imported_module(t.names, path);
        val accessed_globals := imported_names.values;
        la.init(Ast.ModuleAccessed());
        lt.init(Ast.Never());
        if !accessed_globals.has(name) do 
            panic("Module "+join(".", path)+" does not declare "+name);
        end;
        val accessed := accessed_globals.get(name);
        if !accessed.is_exported do 
            panic("Module "+join(".", path)+" does not export "+name);
        end
        val field_ty := TR.resolve(accessed.scope, accessed.ty);
        lft.init(field_ty);
        field_ty
    end else do 
        val obj_ty := infer(t, obj);
        lt.init(obj_ty);

        val (member_ty, acc_ty) := get_property_ty(t, name, obj_ty, TC.lazy_str(e));
        lft.init(member_ty);
        la.init(acc_ty);
        member_ty
    end;
    case IndexExpr(lst, idx, llist_ty) := do
        EC.check(t, idx, Ast.NumberT());
        val list_ty := infer(t, lst);
        llist_ty.init(list_ty);
        val et := match list_ty do 
            case ListOf(elem_ty) := elem_ty;
            case StringT() := list_ty;
            case ? := panic("Require indexed object to be a list or string, not "+list_ty+" in "+e);
        end;
        et
    end;
    case MatchExpr(matched, arms, lmty, lty) := do 
        val matched_ty := infer(t, matched);
        if arms.length = 0 do 
            panic("Cannot infer type of match with out arms: "+e);
        end;
        lmty.init(matched_ty);
        var resulting := None.[Ast.Type]();
        for (pattern, expr, lenv) in arms do 
            t.open_scope();
                PC.check_pattern(t, pattern, matched_ty);
                fun infer_match_ty() do 
                    val ty := infer(t, expr);
                    resulting := Some.[Ast.Type](ty);
                end;
                if val Some(ty) := resulting then do 
                    if val VoidT() := ty then do 
                        infer_match_ty();
                    end else do 
                        EC.check(t, expr, ty);
                    end;
                end else do 
                    infer_match_ty();
                end;
                lenv.init(t.names);
            t.close_scope();
        end;
        if val Some(typ) := resulting then do 
            lty.init(typ);
            typ
        end else do 
            panic("Could not infer resulting type of "+e)
        end
    end;
    case ReturnExpr(ret, lty) := do 
        lty.init(Ast.Never());
        val (can_return, return_ty) := t.return_tys.last;
        if !can_return do panic("Cannot return outside of functions and methods: "+e); end;
        EC.check(t, ret, return_ty);
        Ast.Never()
    end;
    case Break(lty) := do 
        if !t.in_loops.last do panic("Cannot break outside of loops"); end;
        lty.init(Ast.Never());
        Ast.Never()
    end;
end;

fun infer_function(
    t : TC.Typechecker,
    params : Ast.Parameter[], 
    return_type : Ast.Type,
    body : Ast.Expr,
    lenv : Util.LateInitialized(Ast.Namespace)) : Ast.Type
do 
    t.open_scope();
        t.in_loops.push(false);
        for param in params do 
            DC.declare_param(t, param);
        end;
        KC.check_kind(t, return_type, Ast.ConcreteType());
        EC.check(t, body, return_type);
        lenv.init(t.names);
        t.in_loops.pop();
    t.close_scope();
    Ast.Function([], Ast.param_types(params), return_type)
end

fun infer_block(
    t : TC.Typechecker, 
    stmts : Ast.Stmt[], 
    end_expr : Optional(Ast.Expr),
    lt : Ast.LateType,
    lenv : Util.LateInitialized(Ast.Namespace)) : Ast.Type
do 
    t.open_scope();
        for stmt in stmts do 
            SC.check_stmt(t, stmt);
        end;
        var result_type := Ast.VoidT();
        if val Some(e) := end_expr do 
            result_type := infer(t, e);
        end;
        lenv.init(t.names);
    t.close_scope();
    lt.init(result_type);
    result_type
end

fun infer_for(
    tc : TC.Typechecker, 
    loop_var : Ast.Setter, 
    iterated : Ast.Expr, 
    body : Ast.Expr, 
    lenv : Util.LateInitialized(Ast.Namespace), 
    lt : Ast.LateType,
    lit : Ast.LateType) : Ast.Type 
do 
    val iterated_ty := infer(tc, iterated);
    tc.open_scope();
        tc.in_loops.push(true);
        val ListOf(elem_ty) := iterated_ty else panic("Cannot iterate non-list-type "+iterated_ty);
        lit.init(elem_ty);
        DC.check_declaration_setter(tc, loop_var, elem_ty, false);
        val resulting_elem_ty := infer(tc, body);
        lenv.init(tc.names);
        tc.in_loops.pop();
    tc.close_scope();
    val resulting := Ast.ListOf(resulting_elem_ty);
    lt.init(resulting);
    resulting
end

fun infer_while(
    tc : TC.Typechecker, 
    cond : Ast.Condition, 
    body : Ast.Expr, 
    lty : Ast.LateType) : Ast.Type 
do 
    tc.open_scope();
        EC.check_condition(tc, cond);
        tc.in_loops.push(true);
        val elem_ty := infer(tc, body);
        val resulting := Ast.ListOf(elem_ty);
        lty.init(resulting);
        tc.in_loops.pop();
    tc.close_scope();
    resulting
end

fun infer_binary(t : TC.Typechecker, op : Ast.BinOp, lhs : Ast.Expr, rhs : Ast.Expr) : Ast.Type := match op do 
    case Add(lty) := do 
        val lhs_type := infer(t, lhs);
        match lhs_type do 
            case NumberT() := do 
                EC.check(t, rhs, Ast.NumberT());
                lty.init(Ast.NumberT());
                Ast.NumberT()
            end;
            case StringT() := do 
                EC.check(t, rhs, Ast.Any());
                lty.init(Ast.StringT());
                Ast.StringT()
            end;
            case ? := do 
                t.error.[Ast.Type]("Invalid left type for +: "+lhs_type)
            end;
        end
    end;
    case LessThan() := infer_numeric_comparison(t, lhs, rhs);
    case LessEqual() := infer_numeric_comparison(t, lhs, rhs);
    case GreaterThan() := infer_numeric_comparison(t, lhs, rhs);
    case GreaterEqual() := infer_numeric_comparison(t, lhs, rhs);
    case Equals() := infer_equality(t, lhs, rhs);
    case NotEquals() := infer_equality(t, lhs, rhs);
    case And() := infer_boolean_operator(t, lhs, rhs);
    case Or() := infer_boolean_operator(t, lhs, rhs);
    case Xor() := infer_boolean_operator(t, lhs, rhs);
    case ? := do 
        EC.check(t, lhs, Ast.NumberT());
        EC.check(t, rhs, Ast.NumberT());
        Ast.NumberT()
    end;
end;

fun infer_boolean_operator(t : TC.Typechecker, lhs : Ast.Expr, rhs : Ast.Expr) : Ast.Type do 
    EC.check(t, lhs, Ast.BooleanT());
    EC.check(t, rhs, Ast.BooleanT());
    Ast.BooleanT()
end

fun infer_numeric_comparison(t : TC.Typechecker, lhs : Ast.Expr, rhs : Ast.Expr) : Ast.Type do 
    EC.check(t, lhs, Ast.NumberT());
    EC.check(t, rhs, Ast.NumberT());
    Ast.BooleanT()
end

fun infer_equality(t : TC.Typechecker, lhs : Ast.Expr, rhs : Ast.Expr) : Ast.Type do 
    val compared_type := infer(t, lhs);
    EC.check(t, rhs, compared_type);
    Ast.BooleanT()
end

fun infer_unary(t : TC.Typechecker, op : Ast.UnOp, operand : Ast.Expr) : Ast.Type do 
    val op_type := match op do 
        case Not() := Ast.BooleanT();
        case ? := Ast.NumberT();
    end;
    EC.check(t, operand, op_type);
    op_type 
end

fun accessed_object(tc : TC.Typechecker, expr : Ast.Expr) : Ast.AccessedObjectType do 
    val Module(path) := Ast.get_as_path(expr) else return Ast.NormalObject(); // Expression has to be a path
    if TR.has_imported_module(tc.names, path) then // Expression is an imported object
        Ast.Module(path)
    else 
        Ast.NormalObject()
end

fun get_property_ty(tc : TC.Typechecker, name : String, ty : Ast.Type, err_str : Fun() : String) : (Ast.Type, Ast.AccessType) := match ty do  
    case ListOf(elem_ty) := builtin_list_property(elem_ty, name, err_str);
    case Applied(app_ty, typarams) := do 
        val (unsub_ty, acc) := get_property_ty(tc, name, app_ty, err_str);
        val inf := Ast.info_for(tc.names, app_ty, fun(wrong_ty : Ast.Type) : String := "Cannot read property of non-class-type "+wrong_ty+" in expression "+err_str());
        val declared_typarams := typarams_of(inf);
        if typarams.length != declared_typarams.length do panic("Expected "+declared_typarams.length+" type parameters, got "+typarams.length+" in "+ty); end;
        val substitutes := Env.AList.[Ast.Type]();
        for i in [0..typarams.length] do 
            substitutes.insert(declared_typarams[i].name, typarams[i]);
        end;
        val resulting := Subst.substitute(unsub_ty, substitutes);
        (resulting, acc)
    end;
    case ? := get_property_of_info(tc, Ast.info_for(tc.names, ty, fun(wrong_ty : Ast.Type) : String := "Cannot read property of non-class-type "+wrong_ty+"in expression "+err_str()), name, err_str);
end;

fun get_property_of_info(tc : TC.Typechecker, class_info : Ast.TyInfo, name : String, err_str : Fun() : String) : (Ast.Type, Ast.AccessType) do 
    match class_info do 
        case ClassInfo(class_name, targs, fields, methods, exported, nmspc) := do 
            if fields.has(name) then do 
                val ty := TR.resolve(nmspc, fields.get(name).ty);
                (ty, Ast.FieldAccess())
            end else if methods.has(name) then do 
                val ty := TR.resolve(nmspc, methods.get(name).ty);
                (ty, Ast.MethodAccess())
            end else panic("Type "+class_name+" has no field or method called "+name)
        end;
        case TyAliasInfo(def_name, definition, ?, scope) := get_property_ty(tc, name, definition, err_str);
        case EnumInfo(enum_name, targs, ?, methods, exported, nmspc) := do 
            if methods.has(name) then do 
                (TR.resolve(nmspc, methods.get(name).ty), Ast.MethodAccess())
            end else panic("Type "+enum_name+" has no method called "+name)
        end;
    end
end

fun builtin_list_property(elem_ty : Ast.Type, name : String, err_str : Fun() : String) : (Ast.Type, Ast.AccessType) := match name do 
    case "length" := (Ast.NumberT(), Ast.FieldAccess());
    case "first" := (elem_ty, Ast.FieldAccess());
    case "last" := (elem_ty, Ast.FieldAccess());
    case "push" := (Ast.Function([], [elem_ty], Ast.VoidT()), Ast.MethodAccess());
    case "pop" := (Ast.Function([], [], elem_ty), Ast.MethodAccess());
    // Peekt auf das letzte element. für das erste kann first verwendet werden
    case "peek" := (Ast.Function([], [], elem_ty), Ast.MethodAccess()); 
    case "dequeue" := (Ast.Function([], [], elem_ty), Ast.MethodAccess()); // Entfernt das erste element
    case "prepend" := (Ast.Function([], [elem_ty], Ast.VoidT()), Ast.MethodAccess());
    case "append" := (Ast.Function([], [Ast.ListOf(elem_ty)], Ast.VoidT()), Ast.MethodAccess());
end;

fun typarams_of(inf : Ast.TyInfo) : Ast.TypeParameter[] := match inf do 
    case ClassInfo(?, params, ?, ?, ?, ?) := params;
    case TyAliasInfo(?, ?, ?, ?) := []; // Type aliases are concrete types
    case EnumInfo(?, params, ?, ?, ?, ?) := params;
    case TypeParameterInfo(?) := [];
end;