module Typechecking.Typechecker;

import Ast := Syntax.Ast;
import Env := Syntax.Env;
import Util;
import SFG := IO.SourceFileGatherer;
import KC := Typechecking.Kindchecker;
import SC := Typechecking.StmtChecker;
import DC := Typechecking.DeclChecker;
import TR := Syntax.TypeResolver;

fun typecheck(sfg : SFG.SFGatherer, file : SFG.SourceFile) do 
    val tc := Typechecker(file);

    declare_builtins(tc);

    print("== Typechecking "+file.path+" ==");

    for decl in file.ast.decls do 
        DC.check_decl(tc, decl);
    end;
    move_line_up();
end

class Typechecker where 
    var names : Ast.Namespace;
    val return_tys : (Bool, Ast.Type)[] := [(false, Ast.Never())]; // Global variables can't return, so push false first
    val in_loops : Bool[] := [false];
    var is_in_class : Bool := false;
    var is_in_constructor : Bool := false;
    var scope_depth : Number := 0; // 0 means global
    val file : SFG.SourceFile;
    var predeclared_variables : String[] := [];
    
    new(checked_file : SFG.SourceFile) do 
        this.names := checked_file.names;
        this.file := checked_file;
    end

    fun error[A](message : String) : A := panic(message);
    fun require_assigneable(to : Ast.Type, from : Ast.Type, violating_section : Fun() : String) do 
        val to_ty := TR.resolve(this.names, to);
        val from_ty := TR.resolve(this.names, from);
        if from = Ast.Never() do return null; end;
        if !this.types_equal(to_ty, from_ty) do
            this.error.[Void]("" + from+" is not assigneable to "+to+" in "+violating_section());
        end;
    end

    fun require_kind(to : Ast.Kind, from : Ast.Kind, violating : Ast.Type) do 
        if from != to do 
            match to do 
                case ConcreteType() := panic("Expected concrete type, got generic type"+to+" in"+violating);
                case GenericType(parts, part) := panic("Expected generic type"+to+", got concrete type in "+violating);
            end;
        end
    end

    fun require_numeric(ty : Ast.Type, violating : Fun() : String) := match ty do 
        case Numeric(?) := do end;
        case ? := panic("Expected numeric type, got "+ty+" in "+violating());
    end;

    fun open_scope() do 
        this.names := this.names.open_scope();
        this.scope_depth := this.scope_depth + 1;
    end
    fun close_scope() do 
        this.names := this.names.close_scope();
        this.scope_depth := this.scope_depth - 1;
    end

    fun type_of_var(name : String) : Ast.Type := this.names.values.get(name).ty;
    fun is_var_mutable(name : String) : Bool := this.names.values.get(name).is_mutable;

    fun type_info_for(name : String) : Ast.TyInfo := this.names.types.get(name);

    fun var_declared(name : String) : Bool := this.names.values.has(name);
    fun type_declared(name : String) : Bool := this.names.types.has(name);

    fun declare(name : String, ty : Ast.Type, m : Bool) do 
        if this.scope_depth > 0 do // Top level names are already declare
            this.names.values.insert(name, Ast.VarInfo(m, ty, name, this.names));
        end;
    end
    fun declare_type(name : String, ty_info : Ast.TyInfo) := this.names.types.insert(name, ty_info);

    fun is_global() : Bool := this.names.values.outer = None.[Env.Env(Ast.VarInfo)]();
    
    fun types_equal(to : Ast.Type, from : Ast.Type) : Bool := match (to, from) do 
        case (Numeric(nty1), Numeric(nty2)) := nty1 = nty2;
        case (Any(), ?) := true; // Can assign everything to any
        case (BooleanT(), BooleanT()) := true;
        case (StringT(), StringT()) := true;
        case (VoidT(), VoidT()) := true;
        case (Tuple(tys1), Tuple(tys2)) := if tys1.length = tys2.length then true 
            else do 
                for i in [0..tys1.length] do 
                    if !this.types_equal(tys1[i], tys2[i]) do 
                        return false;
                    end;
                end;
                true
            end;
        case (Name(name1, lenv1), Name(name2, lenv2)) := name1 = name2 
            and if lenv1.is_init() and lenv2.is_init() 
                then if lenv1.get().types = lenv2.get().types then true else do 
                    print("Different namespaces");
                    print_namespace(lenv1.get()); print("other: "); print_namespace(lenv2.get());
                    panic("First: "+name1+" other: "+name2)
                end
                else panic("Cannot compare names from unknown namespace for equality: "+name1+", "+name2);
        case (Function(typparams1, args1, retty1), Function(typparams2, args2, retty2)) := this.types_equal(retty1, retty2)
            and (if typparams1.length != 0 or typparams2.length != 0 then panic("Cannot decide equality of types with type parameters") else true)
            and args1.length = args2.length 
            and do 
                for i in [0..args1.length] do 
                    if !this.types_equal(args1[i], args2[i]) do return false end;
                end;
                true
            end;
        case (ListOf(elem_ty1), ListOf(elem_ty2)) := this.types_equal(elem_ty1, elem_ty2);
        case (Never(), Never()) := true;
        case (ModuleAccess(?, ?, lty), other_ty) := do 
            val to_ty := TR.resolve(this.names, to);
            this.types_equal(to_ty, other_ty)
        end;
        case (other_ty, ModuleAccess(?, ?, lty)) := do 
            val from_ty := TR.resolve(this.names, from);
            this.types_equal(other_ty, from_ty)
        end;
        case (Applied(a1, params1), Applied(a2, params2)) := this.types_equal(a1, a2) and params1.length = params2.length 
            and do 
                for i in [0..params1.length] do 
                    if !this.types_equal(params1[i], params2[i]) do return false; end;
                end;
                true
            end;
        case ? := false;
    end;
end

fun print_namespace(nmscp : Ast.Namespace) do 
    var env := Some.[Env.Env(Ast.TyInfo)](nmscp.types);
    while val Some(e) := env do 
        print(""+e.bindings);
        env := e.outer;
    end;
end

fun lazy_str(e : Ast.Expr) : Fun() : String := fun() : String := "" + e;

fun declare_builtins(tc : Typechecker) do 
    tc.names.values.insert("panic", Ast.VarInfo(false, Ast.Function([], [Ast.StringT()], Ast.Never()), "panic", tc.names));
    tc.names.values.insert("args", Ast.VarInfo(false, Ast.Function([], [], Ast.ListOf(Ast.StringT())), "args", tc.names));
    //tc.names.values.insert("join", Ast.VarInfo(false, Ast.Function([], [Ast.StringT(), Ast.ListOf(Ast.StringT())], Ast.StringT()), "join", tc.names));
    //tc.names.values.insert("split", Ast.VarInfo(false, Ast.Function([], [Ast.StringT(), Ast.StringT()], Ast.ListOf(Ast.StringT())), "split", tc.names));
    //tc.names.values.insert("number", Ast.VarInfo(false, Ast.Function([], [Ast.StringT()], Ast.NumberT()), "number", tc.names));
    //tc.names.values.insert("len", Ast.VarInfo(false, Ast.Function([], [Ast.StringT()], Ast.NumberT()), "len", tc.names));
    //tc.names.values.insert("strip", Ast.VarInfo(false, Ast.Function([], [Ast.StringT()], Ast.StringT()), "strip", tc.names));
    //tc.names.values.insert("matches", Ast.VarInfo(false, Ast.Function([], [Ast.StringT(), Ast.StringT()], Ast.BooleanT()), "matches", tc.names));
    //tc.names.values.insert("openFile", Ast.VarInfo(false, Ast.Function([], [Ast.StringT()], Ast.StringT()), "openFile", tc.names));
    //tc.names.values.insert("isNull", Ast.VarInfo(false, Ast.Function([], [Ast.Any()], Ast.BooleanT()), "isNull", tc.names));
    //tc.names.values.insert("writeToFile", Ast.VarInfo(false, Ast.Function([], [Ast.StringT(), Ast.StringT()], Ast.VoidT()), "writeToFile", tc.names));
    //tc.names.values.insert("replace", Ast.VarInfo(false, Ast.Function([], [Ast.StringT(), Ast.StringT(), Ast.StringT()], Ast.StringT()), "replace", tc.names));
end