module Ast;

import Env;
import Util;

enum Expr where 
    DesugarableExpr(Mut(Expr)),
    NumberLiteral(Number),
    StringLiteral(String),
    Boolean(Bool),
    NullLiteral(),
    Identifier(String, Util.LateInitialized(Type)),
    BinaryOperation(BinOp, Expr, Expr),
    UnaryOperation(UnOp, Expr),
    InstantiationExpr(Expr, Type[], Util.LateInitialized(Type)),
    FunctionCall(Expr, Expr[]),
    FunctionExpr(Parameter[], Type, Expr, Util.LateInitialized(Namespace)),
    IfExpr(Util.LateInitialized(Type), Expr, Expr, Expr),
    IfValExpr(Util.LateInitialized(Type), Pattern, Expr, Expr, Expr,  
              Util.LateInitialized(Namespace), Util.LateInitialized(Type)),
    MatchExpr(Expr, (Pattern, Expr, Util.LateInitialized(Namespace))[], 
              Util.LateInitialized(Type), Util.LateInitialized(Type)),
    ListExpr(Expr[], Util.LateInitialized(Type)),
    RangeExpr(Expr, Expr),
    IndexExpr(Expr, Expr, Util.LateInitialized(Type)),
    PropertyExpr(Expr, String, Util.LateInitialized(AccessType), Util.LateInitialized(Type), 
                               Util.LateInitialized(Type)),
    TupleExpr(Expr[], Util.LateInitialized(Type)),
    BlockExpr(Stmt[], Util.Optional(Expr), Util.LateInitialized(Type), Util.LateInitialized(Namespace)),
    WhileExpr(Expr, Expr, Util.LateInitialized(Namespace), Util.LateInitialized(Type)),
    WhileValExpr(Pattern, Expr, Expr, Util.LateInitialized(Type), Util.LateInitialized(Namespace), Util.LateInitialized(Type)),
    ForExpr(Setter, Expr, Expr, Util.LateInitialized(Namespace), Util.LateInitialized(Type), 
                                Util.LateInitialized(Type)),
    WildCardExpression(),
    ReturnExpr(Expr, Util.LateInitialized(Type)),
    Break(Util.LateInitialized(Type)),
    ThisExpr();
end

class Mut(E) where 
    var expr : E;
    new(e : E) do this.expr := e; end

    fun get() : E := this.expr;
    fun set(e : E) do this.expr := e; end;
end

enum Pattern where 
    NumericPattern(Number),
    StringPattern(String),
    BooleanPattern(Bool),
    NamePattern(String),
    WildcardPattern(),
    TuplePattern(Pattern[]),
    ConstructorPattern(String, Pattern[], Util.LateInitialized(EnumConstructor), Util.LateInitialized(Type), Util.LateInitialized(TyInfo));
end

enum AccessType where 
    FieldAccess(), MethodAccess(), ModuleAccessed();
end

enum BinOp where 
    Add(Util.LateInitialized(Type)), Sub(), Mul(), Div(), Mod(), LessThan(), LessEqual(), GreaterEqual(), GreaterThan(), Equals(), NotEquals(), 
    And(), Or(), Xor();
end
enum UnOp where 
    Plus(), Minus(), Not();
end

enum Stmt where 
    ExprStmt(Expr),
    IfStmt(Expr, Expr),
    SetStatement(Setter, Expr),
    Declaration(Decl),
    EmptyStmt();
end;

enum Setter where 
    TupleSetter(Setter[], Util.LateInitialized(Type)),
    Variable(String), WildcardSetter(),
    Property(Expr, String, Util.LateInitialized(Type)/* Should always be the Name of the Class */),
    IndexSetter(Expr, Expr);
end;

enum BlockPart where 
    Statement(Stmt),
    Expression(Expr);
end

enum Decl where 
    DesugarableDecl(Mut(Decl)),
    EmptyDecl(),
    VarDecl(Setter, Util.LateInitialized(Type), Util.Optional(Expr), Bool /* mut */, Bool /* */),
    ValElseDeclaration(Pattern, Expr, Expr, Bool /* mut */, Bool /* */, Util.LateInitialized(Type), 
                       Util.LateInitialized(Type), Util.LateInitialized(Namespace)),
    FunDecl(String, TypeParameter[], Parameter[], Type, Expr, Bool /* */, Util.LateInitialized(Namespace)),
    ClassDecl(String, TypeParameter[], Decl[], Util.Optional(Constructor), Bool /* */, Util.LateInitialized(Namespace)),
    EnumDecl(String, TypeParameter[], EnumConstructor[], Decl[], Bool /* */, Util.LateInitialized(Namespace));
end;

enum Import where 
    BasicImport(String[]),
    AliasImport(String, String[]);
end

class EnumConstructor where 
    val name : String;
    val fields : Type[];
    new(n : String, fs : Type[]) do 
        this.name := n;
        this.fields := fs;
    end
end

class Constructor where 
    val params : Parameter[];
    val body : Expr;
    val lenv : Util.LateInitialized(Namespace) := late_namespace();

    new(p : Parameter[], b : Expr) do 
        this.params := p;
        this.body := b;
    end;
end;

class VarInfo where 
    val ty : Type;
    val is_mutable : Bool;
    val name : String;
    var is_exported : Bool := false;
    var is_constructor : Bool := false;
    val scope : Namespace;
    new(m : Bool, t : Type, n : String, s : Namespace) do 
        this.is_mutable := m; this.ty := t; this.name := n;
        this.scope := s;
    end
end

enum TyInfo where 
    ClassInfo(String, TypeParameter[], Env.AList(VarInfo) /* fields */, Env.AList(VarInfo) /* methods */, Bool /* exported */, Namespace),
    EnumInfo(String, TypeParameter[], EnumConstructor[], Env.AList(VarInfo) /* methods, doesn't have fields */, Bool /* exported */, Namespace),
    TypeParameterInfo(String);
end

enum Parameter where 
    NormalParam(String, Type);
end


fun param_types(params : Parameter[]) : Type[] := 
    for param in params yield 
        match param do 
            case NormalParam(?, ty) := ty;
        end
    end;

class Program where 
    val imports : Import[] := [];
    val decls : Decl[] := [];
end

enum Type where 
    NumberT(), BooleanT(), StringT(), VoidT(),
    Tuple(Type[]), Any(),
    Name(String, Util.LateInitialized(Namespace)), // Enviroment the name is defined in
    Function(TypeParameter[], Type[], Type), ListOf(Type),
    ModuleAccess(String[], String, Util.LateInitialized(Type)), // Fully resolved type at end
    Applied(Type, Type[]),
    Never();
end

enum Kind where 
    ConcreteType(),
    GenericType(Kind[], Kind);
end

class TypeParameter where 
    val name : String;
    new(n : String) do 
        this.name := n;
    end
end

/*

var name_counter : Number := 0;

class Symbol where
    val text : String;
    val id : Number;
    new(text : String) do
        this.text := src;
        this.id := name_counter;
        name_counter := name_counter + 1;
    end
end

*/

fun late_type() : Util.LateInitialized(Type) := Util.LateInitialized.[Type]();
fun late_namespace() : Util.LateInitialized(Namespace) := Util.LateInitialized.[Namespace]();

fun get_as_path(e : Expr) : AccessedObjectType := match e do 
    case DesugarableExpr(mute) := get_as_path(mute.get());
    case Identifier(name, ?) := Module([name]);
    case PropertyExpr(path, name, ?, ?, ?) := if val Module(path_until_now) := get_as_path(path) then do 
        path_until_now.push(name);
        Module(path_until_now)
    end else NormalObject();
    case ? := NormalObject();
end;

enum AccessedObjectType where 
    Module(String[]), NormalObject();
end


class Namespace where 
    var values : Env.Env(VarInfo);
    var types : Env.Env(TyInfo);

    var imported_modules : Env.AList(Namespace) 
                        := Env.AList.[Namespace]();

    val module_path : String[];

    new(mod_path : String[]) do 
        this.values := Env.Env.[VarInfo]();
        this.types := Env.Env.[TyInfo]();
        this.module_path := mod_path;
    end

    fun open_scope() : Namespace do 
        val result := Namespace(this.module_path);
        result.values := this.values.open_scope();
        result.types := this.types.open_scope();
        result.imported_modules := this.imported_modules;
        result
    end
    fun close_scope() : Namespace do 
        val result := Namespace(this.module_path);
        result.values := this.values.close_scope();
        result.types := this.types.close_scope();
        result.imported_modules := this.imported_modules;
        result
    end

    fun env_defined_in(key : String) : Namespace do 
        var ty_env := this.types;
        var val_env := this.values;
        while !ty_env.bindings.has(key) do
            if ty_env.outer.is_some() != val_env.outer.is_some() do 
                print("Scope depth mismatch: ");
                print("Types: ");
                ty_env.print_self();
                print("Values: ");
                val_env.print_self();
            end;
            ty_env := ty_env.outer.expect("Unknown variable '"+key+"'");
            val_env := val_env.outer.unwrap();
        end;
        val result := Namespace(this.module_path);
        result.values := val_env;
        result.types := ty_env;
        result.imported_modules := this.imported_modules;
        result
    end
end