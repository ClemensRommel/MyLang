module Ast;

import Env;

enum Expr where 
    NumberLiteral(Number),
    StringLiteral(String),
    Boolean(Bool),
    NullLiteral(),
    Identifier(String),
    BinaryOperation(BinOp, Expr, Expr),
    UnaryOperation(UnOp, Expr),
    FunctionCall(Expr, Expr[]),
    FunctionExpr(Parameter[], Type, Expr, LateInitialized(Env.Env(VarInfo))),
    IfExpr(LateInitialized(Type), Expr, Expr, Expr),
//    ListExpr(Expr[]),
//    IndexExpr(Expr, Expr),
    // PropertyExpr(Expr, String),
    BlockExpr(Stmt[], Optional(Expr), LateInitialized(Type), LateInitialized(Env.Env(VarInfo)));
    // WhileExpr(Expr, Stmt),
    // ForExpr(String, Expr, Expr),
//    ThisExpr();
end;

enum BinOp where 
    Add(), Sub(), Mul(), Div(), Mod(), LessThan(), LessEqual(), GreaterEqual(), GreaterThan(), Equals(), NotEquals(), And(), Or(), Xor();
end;
enum UnOp where 
    Plus(), Minus(), Not();
end; 

export enum Stmt where 
    ExprStmt(Expr),
    PrintStmt(Expr),
    SetStatement(Setter, Expr),
    Declaration(Decl),
    EmptyStmt();
end;

export enum Setter where 
    Variable(String);
end;

export enum BlockPart where 
    Statement(Stmt),
    Expression(Expr);
end

export enum Decl where 
    VarDecl(String, LateInitialized(Type), Expr, Bool /* mut */, Bool /* export */),
    FunDecl(String, Parameter[], Type, Expr, Bool /* export */, LateInitialized(Env.Env(VarInfo)));
end; 

class VarInfo where 
    val ty : Type;
    val is_mutable : Bool;
    new(m : Bool, t : Type) do 
        this.is_mutable := m; this.ty := t;
    end
end

enum Parameter where 
    NormalParam(String, Type);
end

export class Program where 
    val decls : Decl[] := [];
end

enum Type where 
    NumberT(), BooleanT(), StringT(), VoidT(),
    Function(Type[], Type);
end

export class LateInitialized(T) where 
    var field : Optional(T) := None.[T]();

    fun get() : T := match this.field do 
        case Some(t) := t;
        case None() := panic("Error: Attempted to access uninitialized field");
    end;

    fun init(t : T) do 
        this.field := Some.[T](t);
    end
    fun is_init() : Bool := this.field != None.[T]();
end

export enum Optional(T) where
    None(), Some(T);
end;

export fun late_env() : LateInitialized(Env.Env(VarInfo)) := LateInitialized.[Env.Env(VarInfo)]();
export fun late_type() : LateInitialized(Type) := LateInitialized.[Type]();
