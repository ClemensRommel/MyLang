module Ast;

import Env;
import Util;

enum Expr where 
    NumberLiteral(Number),
    StringLiteral(String),
    Boolean(Bool),
    NullLiteral(),
    Identifier(String),
    BinaryOperation(BinOp, Expr, Expr),
    UnaryOperation(UnOp, Expr),
    FunctionCall(Expr, Expr[]),
    FunctionExpr(Parameter[], Type, Expr, Util.LateInitialized(Env.Env(VarInfo))),
    IfExpr(Util.LateInitialized(Type), Expr, Expr, Expr),
    ListExpr(Expr[], Util.LateInitialized(Type)),
    IndexExpr(Expr, Expr),
    PropertyExpr(Expr, String, Util.LateInitialized(AccessType), Util.LateInitialized(Type), Util.LateInitialized(Type)),
    TupleExpr(Expr[], Util.LateInitialized(Type)),
    BlockExpr(Stmt[], Util.Optional(Expr), Util.LateInitialized(Type), Util.LateInitialized(Env.Env(VarInfo))),
    // WhileExpr(Expr, Stmt),
    ForExpr(Setter, Expr, Expr),
    ThisExpr();
end;

enum AccessType where 
    FieldAccess(), MethodAccess();
end

enum BinOp where 
    Add(), Sub(), Mul(), Div(), Mod(), LessThan(), LessEqual(), GreaterEqual(), GreaterThan(), Equals(), NotEquals(), And(), Or(), Xor();
end;
enum UnOp where 
    Plus(), Minus(), Not();
end; 

export enum Stmt where 
    ExprStmt(Expr),
    PrintStmt(Expr),
    SetStatement(Setter, Expr),
    Declaration(Decl),
    EmptyStmt();
end;

export enum Setter where 
    TupleSetter(Setter[], Util.LateInitialized(Type)),
    Variable(String),
    Property(Expr, String, Util.LateInitialized(Type)/* Should always be the Name of the Class */);
end;

export enum BlockPart where 
    Statement(Stmt),
    Expression(Expr);
end

export enum Decl where 
    VarDecl(Setter, Util.LateInitialized(Type), Util.Optional(Expr), Bool /* mut */, Bool /* export */),
    FunDecl(String, Parameter[], Type, Expr, Bool /* export */, Util.LateInitialized(Env.Env(VarInfo))),
    ClassDecl(String, Decl[], Util.Optional(Constructor), Bool /* export */, Util.LateInitialized(Env.Env(VarInfo)));
end; 

export class Constructor where 
    val params : Parameter[];
    val body : Expr;
    val lenv : Util.LateInitialized(Env.Env(VarInfo)) := late_env();

    new(p : Parameter[], b : Expr) do 
        this.params := p;
        this.body := b;
    end;
end;

class VarInfo where 
    val ty : Type;
    val is_mutable : Bool;
    val name : String;
    var is_constructor : Bool := false;
    new(m : Bool, t : Type, n : String) do 
        this.is_mutable := m; this.ty := t; this.name := n;
    end
end

enum TyInfo where 
    ClassInfo(String, Env.AList(VarInfo) /* fields */, Env.AList(VarInfo) /* methods */);
end

enum Parameter where 
    NormalParam(String, Type);
end

export class Program where 
    val decls : Decl[] := [];
end

enum Type where 
    NumberT(), BooleanT(), StringT(), VoidT(),
    Tuple(Type[]), Name(String),
    Function(Type[], Type), ListOf(Type);
end

/*

var name_counter : Number := 0;

class Symbol where
    val text : String;
    val id : Number;
    new(text : String) do
        this.text := src;
        this.id := name_counter;
        name_counter := name_counter + 1;
    end
end

*/

export fun late_env() : Util.LateInitialized(Env.Env(VarInfo)) := Util.LateInitialized.[Env.Env(VarInfo)]();
export fun late_type() : Util.LateInitialized(Type) := Util.LateInitialized.[Type]();
