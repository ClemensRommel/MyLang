module Util;

export enum Optional(T) where
    None(), Some(T);

    fun unwrap() : T := match this do 
        case Some(t) := t;
        case None() := panic("Error: called unwrap on empty Optional");
    end;

    fun map[K](f : Fun(T) : K) : Optional(K) := match this do 
        case None() := None.[K]();
        case Some(t) := Some.[K](f(t));
    end;

    fun expect(e : String) : T := match this do 
        case Some(t) := t;
        case None() := panic("e");
    end;
end;

export class LateInitialized(T) where
    var field : Optional(T) := None.[T]();

    fun get() : T := match this.field do
        case Some(t) := t;
        case None() := panic("Error: Attempted to access uninitialized field");
    end;

    fun init(t : T) do
        this.field := Some.[T](t);
    end
    fun is_init() : Bool := this.field != None.[T]();
end

fun any[T](list : T[], pred : Fun(T) : Bool) : Bool do
    for t in list do
        if pred(t) do return true; end;
    end;
    false
end