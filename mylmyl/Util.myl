module Util;

class LateInitialized(A) where
    var field : Optional(A) := None.[A]();

    fun get() : A := match this.field do
        case Some(t) := t;
        case None() := panic("Error: Attempted to access uninitialized field");
    end;

    fun init(t : A) do
        this.field := Some.[A](t);
    end
    fun is_init() : Bool := this.field != None.[A]();
end

fun wrap_linit[T](t : T) : LateInitialized(T) do 
    val linit := LateInitialized.[T]();
    linit.init(t);
    linit
end

// Typesafe wrapper around builtin function (Temporary)
fun read_file(path : String) : Optional(String) do 
    val maybe_content := openFile(path);
    if isNull(maybe_content) 
        then None.[String]()
        else Some.[String](maybe_content)
end

fun outputFile(path : String, compiled : String) do 
    val initial := split(path, "\\.").first; // Only file extension can contain . as it is not a valid part of a name
    writeToFile(initial+".java", compiled);
end