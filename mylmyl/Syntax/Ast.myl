module Ast;

import Env := Syntax.Env;
import TR := Syntax.TypeResolver;
import Util;

enum Expr where 
    DesugarableExpr(Mut(Expr)),
    NumberLiteral(Number),
    StringLiteral(String),
    Boolean(Bool),
    NullLiteral(),
    Identifier(String, LateType),
    BinaryOperation(BinOp, Expr, Expr),
    UnaryOperation(UnOp, Expr),
    InstantiationExpr(Expr, Type[], LateType),
    FunctionCall(Expr, Expr[]),
    FunctionExpr(Parameter[], Type, Expr, LateNamespace),
    IfExpr(LateType, Condition, Expr, Expr),
    MatchExpr(Expr, (Pattern, Expr, LateNamespace)[], 
              LateType, LateType),
    ListExpr(Expr[], LateType),
    RangeExpr(Expr, Expr),
    IndexExpr(Expr, Expr, LateType),
    PropertyExpr(Expr, String, Util.LateInitialized(AccessType), LateType, 
                               LateType),
    TupleExpr(Expr[], LateType),
    BlockExpr(Stmt[], Optional(Expr), LateType, LateNamespace),
    WhileExpr(Condition, Expr, LateType),
    ForExpr(Setter, Expr, Expr, LateNamespace, LateType, 
                                LateType),
    WildCardExpression(),
    ReturnExpr(Expr, LateType),
    Break(LateType),
    ThisExpr();
end

type LateType := Util.LateInitialized(Type);
type LateNamespace := Util.LateInitialized(Namespace);

enum Condition where 
    BooleanCond(Expr),
    PatternCond(Pattern, Expr, LateType, LateNamespace);
end

class Mut(E) where 
    var expr : E;
    new(e : E) do this.expr := e; end

    fun get() : E := this.expr;
    fun set(e : E) do this.expr := e; end;
end

enum Pattern where 
    NumericPattern(Number),
    StringPattern(String),
    BooleanPattern(Bool),
    NamePattern(String),
    WildcardPattern(),
    TuplePattern(Pattern[]),
    ConstructorPattern(String, Pattern[], Util.LateInitialized(EnumConstructor), LateType, Util.LateInitialized(TyInfo));
end

enum AccessType where 
    FieldAccess(), MethodAccess(), ModuleAccessed();
end

enum BinOp where 
    Add(LateType), Sub(), Mul(), Div(), Mod(), LessThan(), LessEqual(), GreaterEqual(), GreaterThan(), Equals(), NotEquals(), 
    And(), Or(), Xor();
end
enum UnOp where 
    Plus(), Minus(), Not();
end

enum Stmt where 
    DesugarableStmt(Mut(Stmt)),
    ExprStmt(Expr),
    IfStmt(Condition, Expr),
    SetStatement(Setter, Expr),
    Declaration(Decl),
    EmptyStmt();
end;

enum Setter where 
    TupleSetter(Setter[], LateType),
    Variable(String), WildcardSetter(),
    Property(Expr, String, LateType/* Should always be the Name of the Class */),
    IndexSetter(Expr, Expr);
end;

enum BlockPart where 
    Statement(Stmt),
    Expression(Expr);
end

enum Decl where 
    DesugarableDecl(Mut(Decl)),
    EmptyDecl(),
    VarDecl(Setter, LateType, Optional(Expr), Bool /* mut */, Bool /* */),
    ValElseDeclaration(Pattern, Expr, Expr, Bool /* mut */, Bool /* */, LateType, 
                       LateType, LateNamespace),
    FunDecl(String, TypeParameter[], Parameter[], Type, Expr, Bool /* */, LateNamespace),
    TypeAliasDecl(String, Type, Bool, LateNamespace),
    ClassDecl(String, TypeParameter[], Decl[], Optional(Constructor), Bool /* */, LateNamespace),
    EnumDecl(String, TypeParameter[], EnumConstructor[], Decl[], Bool /* */, LateNamespace);
end;

enum Import where 
    BasicImport(String[]),
    AliasImport(String, String[]);
end

class EnumConstructor where 
    val name : String;
    val fields : Type[];
    new(n : String, fs : Type[]) do 
        this.name := n;
        this.fields := fs;
    end
end

class Constructor where 
    val params : Parameter[];
    val body : Expr;
    val lenv : LateNamespace := late_namespace();

    new(p : Parameter[], b : Expr) do 
        this.params := p;
        this.body := b;
    end;
end;

class VarInfo where 
    val ty : Type;
    val is_mutable : Bool;
    val name : String;
    var is_exported : Bool := false;
    var is_constructor : Bool := false;
    val scope : Namespace;
    new(m : Bool, t : Type, n : String, s : Namespace) do 
        this.is_mutable := m; this.ty := t; this.name := n;
        this.scope := s;
    end
end

enum TyInfo where 
    ClassInfo(String, TypeParameter[], Env.AList(VarInfo) /* fields */, Env.AList(VarInfo) /* methods */, Bool /* exported */, Namespace),
    EnumInfo(String, TypeParameter[], EnumConstructor[], Env.AList(VarInfo) /* methods, doesn't have fields */, Bool /* exported */, Namespace),
    TyAliasInfo(String, Type, Bool, Namespace),
    TypeParameterInfo(String);
end

enum Parameter where 
    NormalParam(String, Type);
end


fun param_types(params : Parameter[]) : Type[] := 
    for param in params do 
        match param do 
            case NormalParam(?, ty) := ty;
        end
    end;

class Program where 
    val imports : Import[] := [];
    val decls : Decl[] := [];
end

enum Type where 
    NumberT(), BooleanT(), StringT(), VoidT(),
    Tuple(Type[]), Any(),
    Name(String, LateNamespace), // Enviroment the name is defined in
    Function(TypeParameter[], Type[], Type), ListOf(Type),
    ModuleAccess(String[], String, LateType), // Fully resolved type at end
    Applied(Type, Type[]),
    Never();
end

enum Kind where 
    ConcreteType(),
    GenericType(Kind[], Kind);
end

class TypeParameter where 
    val name : String;
    new(n : String) do 
        this.name := n;
    end
end

/*

var name_counter : Number := 0;

class Symbol where
    val text : String;
    val id : Number;
    new(text : String) do
        this.text := src;
        this.id := name_counter;
        name_counter := name_counter + 1;
    end
end

*/

fun late_type() : LateType := Util.LateInitialized.[Type]();
fun late_namespace() : LateNamespace := Util.LateInitialized.[Namespace]();

fun get_as_path(e : Expr) : AccessedObjectType := match e do 
    case DesugarableExpr(mute) := get_as_path(mute.get());
    case Identifier(name, ?) := Module([name]);
    case PropertyExpr(path, name, ?, ?, ?) := if val Module(path_until_now) := get_as_path(path) then do 
        path_until_now.push(name);
        Module(path_until_now)
    end else NormalObject();
    case ? := NormalObject();
end;

enum AccessedObjectType where 
    Module(String[]), NormalObject();
end


class Namespace where 
    var values : Env.Env(VarInfo);
    var types : Env.Env(TyInfo);

    var imported_modules : Env.AList(Namespace) 
                        := Env.AList.[Namespace]();

    val module_path : String[];

    new(mod_path : String[]) do 
        this.values := Env.Env.[VarInfo]();
        this.types := Env.Env.[TyInfo]();
        this.module_path := mod_path;
    end

    fun open_scope() : Namespace do 
        val result := Namespace(this.module_path);
        result.values := this.values.open_scope();
        result.types := this.types.open_scope();
        result.imported_modules := this.imported_modules;
        result
    end
    fun close_scope() : Namespace do 
        val result := Namespace(this.module_path);
        result.values := this.values.close_scope();
        result.types := this.types.close_scope();
        result.imported_modules := this.imported_modules;
        result
    end

    fun env_defined_in(key : String) : Namespace do 
        var ty_env := this.types;
        var val_env := this.values;
        while !ty_env.bindings.has(key) do
            if ty_env.outer.is_some() != val_env.outer.is_some() do 
                print("Scope depth mismatch: ");
                print("Types: ");
                ty_env.print_self();
                print("Values: ");
                val_env.print_self();
            end;
            ty_env := ty_env.outer.expect("Unknown variable '"+key+"'");
            val_env := val_env.outer.unwrap();
        end;
        val result := Namespace(this.module_path);
        result.values := val_env;
        result.types := ty_env;
        result.imported_modules := this.imported_modules;
        result
    end
end

fun is_type_exported(info : TyInfo) : Bool := match info do 
    case ClassInfo(?, ?, ?, ?, exported, ?) := exported;
    case TyAliasInfo(?, ?, exported, ?) := exported;
    case EnumInfo(?, ?, ?, ?, exported, ?) := exported;
end;

fun scope_of_info(info : TyInfo, fallback : Namespace) : Namespace := match info do 
    case TypeParameterInfo(name) := fallback.env_defined_in(name);
    case TyAliasInfo(?, ?, ?, scope) := scope;
    case ClassInfo(?, ?, ?, ?, ?, scope) := scope;
    case EnumInfo(?, ?, ?, ?, ?, scope) := scope;
end;

fun info_for(names : Namespace, ty : Type, error_message : Fun(Type) : String) : TyInfo do 
    match ty do 
        case Applied(aty, params) := info_for(names ,aty, error_message);
        case Name(name, lenv) := lenv.get().types.get(name);
        case ModuleAccess(path, name, lty) := do val t := TR.resolve(names, ty); info_for(names, t, fun(other_ty : Type) : String := error_message(ty)) end;
        case ? := panic(error_message(ty));
    end
end

fun scope_of_name(name : Type) : Namespace := match name do 
    case Name(n, ln) := ln.get();
end;