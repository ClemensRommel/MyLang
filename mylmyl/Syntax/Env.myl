module Env;

import Util;
import Collections := std.collections;

class AList(A) where 
    var bindings : (String, A)[] := [];
    
    fun get(name : String) : A do 
        for (n, t) in this.bindings do 
            if n = name do 
                return t;
            end;
        end;
        panic("Unknown binding '"+name+"', available: "+this.bindings)
    end
    fun has(name : String) : Bool do 
        for (n, ?) in this.bindings do 
            if n = name do 
                return true;
            end;
        end;
        false
    end
    fun insert(name : String, t : A) do 
        this.bindings.push((name, t));
    end
    fun insert_if_missing(name : String, t : A) do 
        if !this.has(name) do 
            this.insert(name, t);
        end;
    end
    fun update(name : String, value : A) do 
        for i in [0..this.bindings.length] do 
            val (n, ?) := this.bindings[i];
            if name = n do 
                this.bindings[i] := (name, value);
                return null;
            end
        end;
        panic("Tried to update '"+name+"', but name does not exist. Bindings: "+this.bindings);
    end
end

fun AListOf[A](bindings : (String, A)[]) : AList(A) := do 
    val lst := AList.[A]();
    lst.bindings := bindings;
    lst
end;

class Env(T) where 
    var bindings : Collections.HashMap(String, T) := Collections.HashMap.[String, T]();
    var names : String[] := [];
    var outer : Optional(Env(T)) := None.[Env(T)]();

    fun get(name : String) : T do 
        if this.bindings.containsKey(name) then do 
            this.bindings.get(name)
        end else if val Some(o) := this.outer then do 
            o.get(name)
        end else do 
            panic("Unknown variable '"+name+"'")
        end
    end;
    fun has(name : String) : Bool do 
        if this.bindings.containsKey(name) then do 
            true
        end else if val Some(o) := this.outer then do 
            o.has(name)
        end else do 
            false
        end
    end;
    fun insert(name : String, t : T) do this.bindings.put(name, t); this.names.push(name); end
    fun insert_if_missing(name : String, t : T) do 
        if !this.bindings.containsKey(name) do 
            this.bindings.put(name, t);
            this.names.push(name);
        end;
    end
    fun open_scope() : Env(T) do 
        val new_scope := Env.[T]();
        new_scope.outer := Some.[Env(T)](this);
        new_scope
    end
    fun close_scope() : Env(T) do 
        if val Some(o) := this.outer then do 
            o
        end else do 
            panic("Cannot close global scope")
        end
    end
    fun env_defined_in(key : String) : Env(T) := 
        if this.bindings.containsKey(key)
            then this 
        else if val Some(other) := this.outer 
            then other.env_defined_in(key)
            else panic("Unknown variable '"+key+"'");  

    fun print_self() do 
        print(""+this.bindings);
        if val Some(o) := this.outer do 
            o.print_self();
        end;
    end
end