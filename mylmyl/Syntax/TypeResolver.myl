module Syntax.TypeResolver;

import Ast := Syntax.Ast;
import SFG := IO.SourceFileGatherer;
import Util;

// resolve funktioniert über side effects (d.h. der parameter wird verändert),
// gibt den parameter aber zurück
// Macht auch das was require_types_exist tut
fun resolve(names : Ast.Namespace, ty : Ast.Type) : Ast.Type do 
    match ty do 
        case Numeric(?) := ty;
        case Any() := ty;
        case BooleanT() := ty;
        case StringT() := ty;
        case VoidT() := ty;
        case Tuple(parts) := Ast.Tuple(for part in parts do resolve(names, part) end);
        case Name(name, lenv) := do
            val info := if !lenv.is_init() then do // Name belongs to current scope
                if !names.types.has(name) do panic("Unknown type "+name+": available: "+names.types.bindings); end
                val inf := names.types.get(name);
                lenv.init(Ast.scope_of_info(inf, names));
                inf
            end else do
                if !lenv.get().types.has(name) do // Typ existiert nicht im ziel / derzeitigen scope
                    panic("Unknown type "+name);
                end;
                lenv.get().types.get(name)
            end;
            match info do 
                case TyAliasInfo(?, definition, exported, scope) := resolve(scope, definition);
                case ? := ty;
            end
        end;
        //TODO: Generics
        case Function(typarams, params, ret_ty) := Ast.Function(
            typarams,
            for param in params do resolve(names, param) end,
            resolve(names, ret_ty));
        case ListOf(tys) := Ast.ListOf(resolve(names, tys));
        case ModuleAccess(path, name, laccessed) := if laccessed.is_init() then do laccessed.get() end else do 
            if !has_imported_module(names, path) do
                panic("Unknown module "+SFG.path_to_module(path)+" in "+ty);
            end;
            val imported_names := get_imported_module(names, path);
            if !imported_names.types.has(name) do  // Type is not declared
                panic("Module "+join(".", path)+" does not declare "+name);
            end
            val ty_info := imported_names.types.get(name); 
            if !Ast.is_type_exported(ty_info) do  // Type is not visible from this module
                panic("Module "+join(".", path)+" does not export "+name);
            end
            val scope := Ast.scope_of_info(ty_info, imported_names);
            val t := resolve(scope, Ast.Name(name, Util.wrap_linit.[Ast.Namespace](scope)));
            laccessed.init(t);
            t
        end;
        case Applied(applied, params) := Ast.Applied(
            resolve(names, applied),
            for param in params do resolve(names, param) end
        );
        case Never() := ty;
    end
end

fun get_imported_module(names : Ast.Namespace, path : String[]) : Ast.Namespace :=
    if path.length = 1 and names.imported_modules.has(path[0]) 
        then names.imported_modules.get(path[0])
        else names.imported_modules.get(SFG.path_to_module(path));

fun has_imported_module(names : Ast.Namespace, path : String[]) : Bool := 
    (path.length = 1 and names.imported_modules.has(path[0]))
    or names.imported_modules.has(SFG.path_to_module(path));