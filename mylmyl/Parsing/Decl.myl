module Parsing.Decl;

import Ast := Syntax.Ast;
import Env := Syntax.Env;
import P := Parsing.Parser;
import Expr := Parsing.Expr;
import Type := Parsing.Type;
import Tokenizer := Parsing.Tokenizer;
import Util;

fun decl(p : P.Parser) : Ast.Decl do 
    val decl_kind := p.next().kind;
    match decl_kind do 
        case MODULE() := do 
            panic("Did not consume Module declaration, parser state: "+p.pos+" previous: "+p.previous().kind)
        end;
        case VAR() := var_decl(p, true);
        case VAL() := var_decl(p, false);
        case FUN() := fun_decl(p);
        case CLASS() := class_decl(p);
        case ENUM() := enum_decl(p);
        case TYPE() := type_alias_decl(p);
        case NATIVE() := native_item_decl(p);
        case SEMICOLON() := Ast.EmptyDecl();
    end
end

fun var_decl(p : P.Parser, mutable : Bool) : Ast.Decl do 
    val keyword := p.previous();
    val setter_unconverted := Expr.expr(p);
    val ty := Ast.late_type();
    if p.matches_type(Tokenizer.COLON()) do 
        ty.init(Type.type_literal(p));
    end;
    val initializer := if p.matches_type(Tokenizer.ASSIGN()) then do 
        Some.[Ast.Expr](Expr.expr(p))
    end else None.[Ast.Expr]();
    if p.matches_type(Tokenizer.ELSE()) then do 
        val else_br := Expr.expr(p);
        p.consume(Tokenizer.SEMICOLON(), "Expect ';' after variable declaration with else branch");
        p.wrap_sugared_decl(Ast.ValElseDeclaration(P.convert_pattern(setter_unconverted), initializer.expect("Require initializer in val-else declaration at "+keyword.pos.line), else_br, mutable, true, ty, 
                               Ast.late_type(), Ast.late_namespace()))
    end else do 
        p.consume(Tokenizer.SEMICOLON(), "Expect ';' after variable declaration");
        Ast.VarDecl(P.convert_setter(setter_unconverted), ty, initializer, mutable, true)
    end
end

fun fun_decl(p : P.Parser) : Ast.Decl do 
    val name := p.consume(Tokenizer.IDENTIFIER(), "Expect name in function declaration");
    val typarams := type_parameters(p, Tokenizer.LBRACKET(), Tokenizer.RBRACKET());
    val (params, return_type, body) := end_of_function(p, true);
    Ast.FunDecl(name.src, typarams, params, return_type, body, true, Ast.late_namespace())
end

fun end_of_function(p : P.Parser, consume_semi : Bool) : (Ast.Parameter[], Ast.Type, Ast.Expr) do
    val params := parse_parameters(p);
    val return_type := if p.matches_type(Tokenizer.COLON()) 
        then Type.type_literal(p)
        else Ast.VoidT();
    val body := if p.matches_type(Tokenizer.ASSIGN()) then do
        val b := Expr.expr(p);
        if consume_semi do 
            p.consume(Tokenizer.SEMICOLON(), "Expect ';' after function body");
        end
        b 
    end else do 
        p.consume(Tokenizer.DO(), "Expect ':=' or 'do' as start of function body");
        Expr.block_expr(p)
    end;
    (params, return_type, body)
end

fun parse_parameters(p : P.Parser) : Ast.Parameter[] do 
    p.consume(Tokenizer.LPAREN(), "Expect start of parameters in function declaration");
    val params : Ast.Parameter[] := [];
    while !p.matches_type(Tokenizer.RPAREN()) do 
        params.push(parameter(p));
        if p.peek().kind != Tokenizer.RPAREN() do 
            p.consume(Tokenizer.COMMA(), "Expect ',' between parameters");
        end;
    end;
    params
end


fun parameter(p : P.Parser) : Ast.Parameter do 
    val name := p.consume(Tokenizer.IDENTIFIER(), "Expect parameter name");
    p.consume(Tokenizer.COLON(), "Expect ':' before parameter type");
    val param_type := Type.type_literal(p);
    Ast.NormalParam(name.src, param_type)
end

fun class_decl(p : P.Parser) : Ast.Decl do 
    val name := p.consume(Tokenizer.IDENTIFIER(), "Expect class name after 'class' keyword");
    val targs := type_parameters(p, Tokenizer.LPAREN(), Tokenizer.RPAREN());
    p.consume(Tokenizer.WHERE(), "Expect start of class body after class name: 'where'");
    val members : Ast.Decl[] := [];
    var constr : Optional(Ast.Constructor) := None.[Ast.Constructor]();
    while !p.matches_type(Tokenizer.END()) do 
        if p.matches_type(Tokenizer.NEW()) then do 
            if val Some(?) := constr do 
                panic("Error: Class '"+name.src+"' can only have on constructor");
            end;
            constr := Some.[Ast.Constructor](constructor(p));
        end else do 
            val member : Ast.Decl := decl(p);
            members.push(member);
        end;
    end;
    Ast.ClassDecl(name.src, targs, members, constr, true, Ast.late_namespace())
end

fun constructor(p : P.Parser) : Ast.Constructor do 
    val params := parse_parameters(p);
    p.consume(Tokenizer.DO(), "Expect do after end of constructor parameter declaration");
    val body := Expr.block_expr(p);
    Ast.Constructor(params, body)
end

fun enum_decl(p : P.Parser) : Ast.Decl do 
    val name := p.consume(Tokenizer.IDENTIFIER(), "Expect class name after 'class' keyword");
    val targs := type_parameters(p, Tokenizer.LPAREN(), Tokenizer.RPAREN());
    p.consume(Tokenizer.WHERE(), "Expect start of enum body after enum name: 'where'");
    val constructors : Ast.EnumConstructor[] := [];
    var needs_comma := false;
    while !p.matches_type(Tokenizer.SEMICOLON()) do 
        if needs_comma do 
            p.consume(Tokenizer.COMMA(), "Expect ',' to separate enum variants");
        end;
        val constr_name := p.consume(Tokenizer.IDENTIFIER(), "Expect enum variant to start with identifier");
        p.consume(Tokenizer.LPAREN(), "Expect '(' after enum constructor name");
        val types : Ast.Type[] := [];
        var inner_needs_comma := false;
        while !p.matches_type(Tokenizer.RPAREN()) do 
            if inner_needs_comma do p.consume(Tokenizer.COMMA(), "Expect ',' to separate enum variant parameters"); end;
            types.push(Type.type_literal(p));
            inner_needs_comma := true;
        end;
        constructors.push(Ast.EnumConstructor(constr_name.src, types));
        needs_comma := true;
    end;
    val members : Ast.Decl[] := [];
    while !p.matches_type(Tokenizer.END()) do 
        members.push(decl(p));
    end;
    Ast.EnumDecl(name.src, targs, constructors, members, true, Ast.late_namespace())
end

fun type_alias_decl(p : P.Parser) : Ast.Decl do 
    val name := p.consume(Tokenizer.IDENTIFIER(), "Expect name after beginning of type alias").src;
    p.consume(Tokenizer.ASSIGN(), "Expect ':=' after name of type alias");
    val definition := Type.type_literal(p);
    p.consume(Tokenizer.SEMICOLON(), "Expect ';' after type alias");
    Ast.TypeAliasDecl(name, definition, true, Ast.late_namespace())
end

fun native_item_decl(p : P.Parser) : Ast.Decl do 
    match p.next().kind do 
        case FUN() := native_function_decl(p);
        case CLASS() := native_class_decl(p);
        case other := panic("Invalid start of declaration of native item: "+other);
    end
end

fun native_function_decl(p : P.Parser) : Ast.Decl do 
    val signature := function_signature(p);
    p.consume(Tokenizer.ASSIGN(), "Expect ':=' and path after native function declaration");
    val path := p.consume(Tokenizer.STRING_LITERAL(), "Expect path of native function");
    p.consume(Tokenizer.SEMICOLON(), "Expect ';' at end of native function");
    Ast.NativeFunctionDecl(signature.name, signature.ty, path.src)
end

fun native_class_decl(p : P.Parser) : Ast.Decl do 
    val name := p.consume(Tokenizer.IDENTIFIER(), "Expect name for native type").src;
    val typarams := type_parameters(p, Tokenizer.LPAREN(), Tokenizer.RPAREN());
    p.consume(Tokenizer.ASSIGN(), "Expect ':=' before body and name of native type");
    val native_name := p.consume(Tokenizer.STRING_LITERAL(), "Expect native name of native type").src;
    val (method_decls, constr) := if p.matches_type(Tokenizer.SEMICOLON()) then (Env.AList.[Ast.Type](), None.[Ast.Type[]]()) else do 
        p.consume(Tokenizer.WHERE(), "Expect 'where' before methods of native type");
        val list := Env.AList.[Ast.Type]();
        var constr_ty := None.[Ast.Type[]]();
        while !p.matches_type(Tokenizer.END()) do 
            if p.matches_type(Tokenizer.NEW()) then do 
                val tys := parameter_types(p);
                p.consume(Tokenizer.SEMICOLON(), "Expect ';' after parameter types of native constructor");
                if constr_ty.is_some() do panic(p.err("Duplicate native constructor")); end;
                constr_ty := Some.[Ast.Type[]](tys);
            end else do
                p.consume(Tokenizer.FUN(), "Expect 'fun' at start of native method");
                val signature := function_signature(p);
                p.consume(Tokenizer.SEMICOLON(), "Expect ';' after signature of native method");
                list.insert(signature.name, signature.ty);
            end
        end;
        (list, constr_ty)
    end;
    Ast.NativeTypeDecl(name, typarams, native_name, method_decls, constr, true, Ast.late_namespace())
end

fun function_signature(p : P.Parser) : Ast.FunctionSignature do 
    val name := p.consume(Tokenizer.IDENTIFIER(), "Expect name of function").src;
    val typarams := type_parameters(p, Tokenizer.LBRACKET(), Tokenizer.RBRACKET());
    val param_types := parameter_types(p);
    val ret_ty := if p.matches_type(Tokenizer.COLON()) then Type.type_literal(p) else Ast.VoidT();
    Ast.FunctionSignature(name, Ast.Function(typarams, param_types, ret_ty))
end

fun parameter_types(p : P.Parser) : Ast.Type[] do 
    p.consume(Tokenizer.LPAREN(), "Expect '(' at start of parameter types");
    var needs_comma := false;
    while !p.matches_type(Tokenizer.RPAREN()) do 
        if needs_comma do p.consume(Tokenizer.COMMA(), "Expect ',' to separate parameter types"); end;
        val ty := Type.type_literal(p);
        needs_comma := true;
        ty
    end
end 

fun type_parameters(p : P.Parser, start_type : Tokenizer.TokenType, end_type : Tokenizer.TokenType) : Ast.TypeParameter[] := 
    if p.matches_type(start_type) then do 
        val params: Ast.TypeParameter[] := [];
        var needs_comma := false;
        while !p.matches_type(end_type) do 
            if needs_comma do p.consume(Tokenizer.COMMA(), "Expect ',' to separate type parameters"); end;
            val param_name := p.consume(Tokenizer.IDENTIFIER(), "Expect type parameter name");
            params.push(Ast.TypeParameter(param_name.src));
            needs_comma := true;
        end;
        params
    end else [];