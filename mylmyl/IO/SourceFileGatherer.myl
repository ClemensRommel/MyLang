module IO.SourceFileGatherer;
// Gathers all source files for a program and parses them

import Parser := Parsing.Parser;
import Ast := Syntax.Ast;
import Util;
import Env := Syntax.Env;

class SFGatherer where 
    val files_not_found : String[] := [];
    var file_prefix : String := "";

    val parsed_sourcefiles : Env.AList(SourceFile) := Env.AList.[SourceFile](); // Map of all parsed files to be reused
end

// Parsed source file, ready for further processing
class SourceFile where 
    val ast : Ast.Program;
    val undesugared_exprs : Ast.Mut(Ast.Expr)[];
    val undesugared_decls : Ast.Mut(Ast.Decl)[];
    val undesugared_stmts : Ast.Mut(Ast.Stmt)[];
    val names : Ast.Namespace;
    val path : String;
    new(a : Ast.Program, ue : Ast.Mut(Ast.Expr)[], ud : Ast.Mut(Ast.Decl)[], us : Ast.Mut(Ast.Stmt)[], p : String) do 
        this.ast := a;
        this.undesugared_exprs := ue;
        this.undesugared_decls := ud;
        this.undesugared_stmts := us;
        this.path := p;
        val before_dots := split(p, "\\.");
        before_dots.pop();

        this.names := Ast.Namespace(split(join(".", before_dots), "/"));
    end
end;

fun open_and_parse(sfg : SFGatherer, file : String) : Optional(SourceFile) do 
    val Some(source) := Util.read_file(file) else do 
        sfg.files_not_found.push(file);
        return None.[SourceFile]()
    end;
    val (ast, (undesugared_exprs, undesugared_decls, undesugared_stmts)) := Parser.parse(source);
    Some.[SourceFile](SourceFile(ast, undesugared_exprs, undesugared_decls, undesugared_stmts, file))
end

fun process_file(sfg : SFGatherer, path : String) : Optional(SourceFile) do 
    print("Processing: "+path);
    val Some(file) := open_and_parse(sfg, path) else return None.[SourceFile]();
    move_line_up();
    sfg.parsed_sourcefiles.insert(path, file);
    Some.[SourceFile](file)
end

fun get_all_files(sfg : SFGatherer, starting_file : String) do 
    val Some(file) := process_file(sfg, starting_file) else return null;
    for imported in file.ast.imports do 
        val path := path_to(imported);
        if !sfg.parsed_sourcefiles.has(sfg.file_prefix + path) do 
            get_all_files(sfg, sfg.file_prefix + path);
        end;
    end
end

fun generated_code_path(starting_file : String) : String[] do 
    val parts := split(starting_file, "/");
    val output_parts : String[] := [];
    val file_name := "__generated_"+split(parts.last, "\\.").first;
    for i in [1..parts.length - 1] do // Alles au√üer dem letzten
        output_parts.push(parts[i]);
    end;
    output_parts.push(file_name);
    output_parts
end

val std_implicit_path : String := "std/implicit.myl";

fun gather_files(start : String) : SFGatherer do 
    val sfg := SFGatherer();
    sfg.file_prefix := file_path_prefix(start);
    process_file(sfg, std_implicit_path); // Process first, as its needed for other files
    get_all_files(sfg, start);
    if sfg.files_not_found.length != 0 do 
        for file in sfg.files_not_found do 
            print("Could not find or open file: "+file);
        end;
        panic("Error while importing");
    end;
    sfg
end

fun path_to(i : Ast.Import) : String := match i do 
    case BasicImport(parts) := path_to_module(parts);
    case AliasImport(alias, parts) := path_to_module(parts);
end;

fun file_path_prefix(path : String) : String do 
    val parts := split(path, "/");
    var outs : String[] := [];
    for i in [0..parts.length - 1] do 
        outs.push(parts[i]);
    end;
    val joined_path := join("/", outs);
    if outs.length = 0 then "" else joined_path + "/"
end

fun path_to_module(parts : String[]) : String do 
    val relative_path := join("/", parts) + ".myl"; 
    relative_path
end

fun path_to_generated_module(sfg : SFGatherer, parts : String[], use_prefix : Bool) : String do 
    var need_sep := false;
    val relative_part := do 
        var out := "";
        for i in [0..parts.length - 1] do 
            if need_sep do out := out + "."; end;
            val part := parts[i];
            out := out + part;
            need_sep := true;
        end;
        val last_part := parts[parts.length - 1];
        out := out + (if need_sep then "." else "") + "_" + last_part;
        out
    end;
    val absolute_part := if use_prefix then join(".", split(sfg.file_prefix, "/")) else "";
    val resulting := absolute_part + (if absolute_part != "" then "." else "") + relative_part;
    resulting
end