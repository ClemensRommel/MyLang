enum Optional(T) where
    None(), Some(T);

    fun unwrap() : T := match this do 
        case Some(t) := t;
        case None() := panic("Error: called unwrap on empty Optional");
    end;

    fun map[K](f : Fun(T) : K) : Optional(K) := match this do 
        case None() := None.[K]();
        case Some(t) := Some.[K](f(t));
    end;

    fun expect(e : String) : T := match this do 
        case Some(t) := t;
        case None() := panic(e);
    end;
    fun is_some() : Bool := match this do 
        case Some(?) := true;
        case None() := false;
    end;
    fun is_none() : Bool := match this do 
        case Some(?) := false;
        case None() := true;
    end;
end;

fun any[T](list : T[], pred : Fun(T) : Bool) : Bool do
    for t in list do
        if pred(t) do return true; end;
    end;
    false
end

fun snd[A, B](tuple : (A, B)) : B do 
    val (a, b) := tuple;
    b
end;
fun fst[A, B](tuple : (A, B)) : A do 
    val (a, b) := tuple;
    a
end

native fun print(String) := "System.out.println";
native fun move_line_up() := "std.BuiltinFunctions.move_line_up";
native fun join(String, String[]) : String := "std.BuiltinFunctions.join";
native fun split(String, String) : String[] := "std.BuiltinFunctions.split";
native fun len(String) : Number := "std.BuiltinFunctions.len";
native fun strip(String) : String := "std.BuiltinFunctions.strip";
native fun matches(String, String) : Bool := "std.BuiltinFunctions.matches";
native fun openFile(String) : String := "std.BuiltinFunctions.openFile";
native fun isNull(String) : Bool := "std.BuiltinFunctions.isNull";
native fun writeToFile(String, String) := "std.BuiltinFunctions.writeToFile";
native fun number(String) : Number := "std.BuiltinFunctions.number";
// haystack, needle, new
native fun replace(String, String, String) : String := "std.BuiltinFunctions.replace";